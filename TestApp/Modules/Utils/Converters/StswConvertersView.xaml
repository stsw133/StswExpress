<UserControl x:Class="TestApp.StswConvertersView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:se="clr-namespace:StswExpress;assembly=StswExpress"
             xmlns:local="clr-namespace:TestApp"
             mc:Ignorable="d" d:DataContext="{d:DesignInstance Type=local:StswConvertersContext}">

    <se:StswScrollView Padding="5">
        <StackPanel>
            <!-- bool converters -->
            <se:StswExpander Margin="5">
                <se:StswExpander.Header>
                    <se:StswLabel Content="Bool converters" FontSize="14" FontWeight="Bold"/>
                </se:StswExpander.Header>
                <StackPanel>
                    <!-- Bool -->
                    <se:StswLabel Content="StswBoolConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Converts 'bool' → targetType."/>
                        <LineBreak/>
                        <Run Text="Use '!' at the beginning of converter parameter to reverse output value."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswCheckBox Grid.Column="0" Grid.Row="1" HorizontalAlignment="Left" IsChecked="{Binding Values[Bool]}" Margin="5 0 5 5"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[Bool]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswCheckBox Grid.Column="3" Grid.Row="1" HorizontalAlignment="Left" Margin="5 0 5 5" IsReadOnly="True"
                                         IsChecked="{se:StswBindableParameter Values[Bool], Mode=TwoWay, Converter={x:Static se:StswBoolConverter.Instance}, ConverterParameter={Binding Parameters[Bool]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- Compare -->
                    <se:StswLabel Content="StswCompareConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="A converter that compares a numeric value to a specified threshold and determines if it is greater than, less than, greater than or equal to, or less than or equal to the threshold."/>
                        <LineBreak/>
                        <Run Text="Use one of these: '&gt;', '&gt;=', '&lt;', '&lt;=', '=', '!', '&amp;', '@' at the beginning of converter parameter and number after."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[Compare]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[Compare]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswCheckBox Grid.Column="3" Grid.Row="1" HorizontalAlignment="Left" Margin="5 0 5 5" IsReadOnly="True"
                                         IsChecked="{se:StswBindableParameter Values[Compare], Mode=TwoWay, Converter={x:Static se:StswCompareConverter.Instance}, ConverterParameter={Binding Parameters[Compare]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- Contains -->
                    <se:StswLabel Content="StswContainsConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Checks if value parameter contains converter parameter."/>
                        <LineBreak/>
                        <Run Text="Use '!' at the beginning of converter parameter to invert output value."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[Contains]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[Contains]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswCheckBox Grid.Column="3" Grid.Row="1" HorizontalAlignment="Left" Margin="5 0 5 5" IsReadOnly="True"
                                         IsChecked="{se:StswBindableParameter Values[Contains], Mode=TwoWay, Converter={x:Static se:StswContainsConverter.Instance}, ConverterParameter={Binding Parameters[Contains]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- IsType -->
                    <se:StswLabel Content="StswIsTypeConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Compares value type to type in parameter."/>
                    </se:StswText>
                    <!--
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[IsType]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[IsType]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswCheckBox Grid.Column="3" Grid.Row="1" HorizontalAlignment="Left" Margin="5 0 5 5" IsReadOnly="True"
                                         IsChecked="{se:StswBindableParameter Values[IsType], Mode=TwoWay, Converter={x:Static se:StswIsTypeConverter.Instance}, ConverterParameter={Binding Parameters[IsType]}}"/>
                    </se:StswGrid>
                    -->
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- NotNull -->
                    <se:StswLabel Content="StswNotNullConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Checks if value parameter is not null."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[NotNull]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[NotNull]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswCheckBox Grid.Column="3" Grid.Row="1" HorizontalAlignment="Left" Margin="5 0 5 5" IsReadOnly="True"
                                         IsChecked="{se:StswBindableParameter Values[NotNull], Mode=TwoWay, Converter={x:Static se:StswNotNullConverter.Instance}, ConverterParameter={Binding Parameters[NotNull]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- Radio -->
                    <se:StswLabel Content="StswRadioConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Compares value parameter to converter parameter."/>
                        <LineBreak/>
                        <Run Text="Use '!' at the beginning of converter parameter to invert output value."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[Radio]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[Radio]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswCheckBox Grid.Column="3" Grid.Row="1" HorizontalAlignment="Left" Margin="5 0 5 5" IsReadOnly="True"
                                         IsChecked="{se:StswBindableParameter Values[Radio], Mode=TwoWay, Converter={x:Static se:StswRadioConverter.Instance}, ConverterParameter={Binding Parameters[Radio]}}"/>
                    </se:StswGrid>
                </StackPanel>
            </se:StswExpander>
            <!-- color converters -->
            <se:StswExpander Margin="5">
                <se:StswExpander.Header>
                    <se:StswLabel Content="Color converters" FontSize="14" FontWeight="Bold"/>
                </se:StswExpander.Header>
                <StackPanel>
                    <!-- ColorAdvanced -->
                    <se:StswLabel Content="StswColorAdvancedConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Used for color manipulation and conversion based on the provided parameters."/>
                        <LineBreak/>
                        <Run Text="EXAMPLES:  'B-70% S50%'  'A50% B50% S0%'"/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" SelectedColor="{Binding Values[ColorAdvanced]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[ColorAdvanced]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                         SelectedColor="{se:StswBindableParameter Values[ColorAdvanced], Mode=TwoWay, Converter={x:Static se:StswColorAdvancedConverter.Instance}, ConverterParameter={Binding Parameters[ColorAdvanced]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- ColorAlpha -->
                    <se:StswLabel Content="StswColorAlphaConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Takes a color value as input and changes its alpha based on the provided parameters."/>
                        <LineBreak/>
                        <Run Text="EXAMPLES:  '80'  '125'  '180'  '245'  '16%'  '26%'  '36%'  '50%'"/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" SelectedColor="{Binding Values[ColorAlpha]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[ColorAlpha]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                         SelectedColor="{se:StswBindableParameter Values[ColorAlpha], Mode=TwoWay, Converter={x:Static se:StswColorAlphaConverter.Instance}, ConverterParameter={Binding Parameters[ColorAlpha]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- ColorBrightness -->
                    <se:StswLabel Content="StswColorBrightnessConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Takes a color value as input and changes its brightness based on the provided parameters."/>
                        <LineBreak/>
                        <Run Text="EXAMPLES:  '16'  '+25'  '-36'  '?49'  '8%'  '+13%'  '-18%'  '?25%'"/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" SelectedColor="{Binding Values[ColorBrightness]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[ColorBrightness]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                         SelectedColor="{se:StswBindableParameter Values[ColorBrightness], Mode=TwoWay, Converter={x:Static se:StswColorBrightnessConverter.Instance}, ConverterParameter={Binding Parameters[ColorBrightness]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- Color -->
                    <se:StswLabel Content="StswColorConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Used for type conversion between different types."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[Color]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                         SelectedColor="{Binding Values[Color], Mode=TwoWay, Converter={x:Static se:StswColorConverter.Instance}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- ColorGenerator -->
                    <se:StswLabel Content="StswColorGeneratorConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Generate new color based on passed value and the provided seed (brightness) as parameter."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[ColorGenerator]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[ColorGenerator]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                         SelectedColor="{se:StswBindableParameter Values[ColorGenerator], Mode=TwoWay, Converter={x:Static se:StswColorGeneratorConverter.Instance}, ConverterParameter={Binding Parameters[ColorGenerator]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- ColorSaturation -->
                    <se:StswLabel Content="StswColorSaturationConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Takes a color value as input and changes its saturation based on the provided parameters."/>
                        <LineBreak/>
                        <Run Text="EXAMPLES:  '8%'  '13%'  '18%'  '25%'"/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" SelectedColor="{Binding Values[ColorSaturation]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[ColorSaturation]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswColorBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                         SelectedColor="{se:StswBindableParameter Values[ColorSaturation], Mode=TwoWay, Converter={x:Static se:StswColorSaturationConverter.Instance}, ConverterParameter={Binding Parameters[ColorSaturation]}}"/>
                    </se:StswGrid>
                </StackPanel>
            </se:StswExpander>
            <!-- format converters -->
            <se:StswExpander Margin="5">
                <se:StswExpander.Header>
                    <se:StswLabel Content="Format converters" FontSize="14" FontWeight="Bold"/>
                </se:StswExpander.Header>
                <StackPanel>
                    <!-- MultiCultureNumber -->
                    <se:StswLabel Content="StswMultiCultureNumberConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Converts a numeric value into a string with a decimal separator that is appropriate for a given culture."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[MultiCultureNumber]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                        Text="{Binding Values[MultiCultureNumber], Mode=TwoWay, Converter={x:Static se:StswMultiCultureNumberConverter.Instance}}"/>
                    </se:StswGrid>
                </StackPanel>
            </se:StswExpander>
            <!-- list converters -->
            <se:StswExpander Margin="5">
                <se:StswExpander.Header>
                    <se:StswLabel Content="List converters" FontSize="14" FontWeight="Bold"/>
                </se:StswExpander.Header>
                <StackPanel>
                    <!-- EnumDescription -->
                    <se:StswLabel Content="StswEnumDescriptionConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="A converter that converts an enumeration value to its description, using the DescriptionAttribute. If no description is found, it returns the enumeration value as a string."/>
                    </se:StswText>
                    <!--
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswComboBox Grid.Column="0" Grid.Row="1" ItemsSource="{se:StswEnumToList local:ContractorType}" Margin="5 0 5 5" SelectedValue="{Binding Values[EnumDescription]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="False"
                                        Text="{se:StswBindableParameter Values[EnumDescription], Mode=TwoWay, Converter={x:Static se:StswEnumDescriptionConverter.Instance}, ConverterParameter={Binding Parameters[EnumDescription]}}"/>
                    </se:StswGrid>
                    -->
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- ListFromRange -->
                    <se:StswLabel Content="StswListFromRangeConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Converts a range specified by the parameter to a list of integers for data binding purposes. The converter expects the parameter to be a string representing a range in the format 'start-end' or 'end' (e.g., '2-5' or '3'). The generated list contains integers in the specified range using Enumerable.Range."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[ListFromRange]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswComboBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="False"
                                         ItemsSource="{se:StswBindableParameter Values[ListFromRange], Mode=TwoWay, Converter={x:Static se:StswListFromRangeConverter.Instance}, ConverterParameter={Binding Parameters[ListFromRange]}}"/>
                    </se:StswGrid>
                </StackPanel>
            </se:StswExpander>
            <!-- numeric converters -->
            <se:StswExpander Margin="5">
                <se:StswExpander.Header>
                    <se:StswLabel Content="Numeric converters" FontSize="14" FontWeight="Bold"/>
                </se:StswExpander.Header>
                <StackPanel>
                    <!-- Calculate -->
                    <se:StswLabel Content="StswCalculateConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Calculates a numerical value based on another numerical value or a set of values and an operator sign."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswDecimalBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Value="{Binding Values[Calculate]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[Calculate]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswDecimalBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                           Value="{se:StswBindableParameter Values[Calculate], Mode=TwoWay, Converter={x:Static se:StswCalculateConverter.Instance}, ConverterParameter={Binding Parameters[Calculate]}}"/>
                    </se:StswGrid>
                    <se:StswSeparator BorderThickness="1" Margin="-5 10"/>
                    <!-- Sum -->
                    <se:StswLabel Content="StswSumConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Allows the user to sum up the values of a specified property of each item in a collection or a DataTable."/>
                    </se:StswText>
                    <!--
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswComboBox Grid.Column="0" Grid.Row="1" ItemsSource="{Binding Converter={x:Static se:StswListFromRangeConverter.Instance}, ConverterParameter=1-10}" Margin="5 0 5 5" SelectedValuePath="{Binding Parameters[Sum], Mode=OneWayToSource}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswDecimalBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                           Value="{se:StswConverterBindableParameter Values[Sum], Mode=TwoWay, Converter={x:Static se:StswSumConverter.Instance}, ConverterParameter={Binding Parameters[Sum]}}"/>
                    </se:StswGrid>
                    -->
                </StackPanel>
            </se:StswExpander>
            <!-- universal converters -->
            <se:StswExpander Margin="5">
                <se:StswExpander.Header>
                    <se:StswLabel Content="Universal converters" FontSize="14" FontWeight="Bold"/>
                </se:StswExpander.Header>
                <StackPanel>
                    <!-- IfElse -->
                    <se:StswLabel Content="StswIfElseConverter" FontSize="16" FontWeight="Bold"/>
                    <se:StswText FontSize="10" Margin="5 0 5 5" TextWrapping="Wrap">
                        <Run Text="Takes in an input value and a set of parameters in the form of a string separated by a tilde (~) character, which contains three parts:"/>
                        <Run Text="the first part is the condition to evaluate against the input value,"/>
                        <Run Text="the second part is the value to return if the condition is 'true',"/>
                        <Run Text="and the third part is the value to return if the condition is 'false'."/>
                    </se:StswText>
                    <se:StswGrid AutoLayoutMode="AutoDefinitions" ColumnWidths="{se:StswMakeList *}">
                        <se:StswLabel Grid.Column="0" Grid.Row="0" Content="Input value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="0" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Values[IfElse]}"/>
                        <se:StswLabel Grid.Column="1" Grid.Row="0" Content="Input parameter:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="1" Grid.Row="1" Margin="5 0 5 5" Text="{Binding Parameters[IfElse]}"/>
                        <se:StswLabel Grid.Column="3" Grid.Row="0" Content="Output value:" Margin="5 5 5 0"/>
                        <se:StswTextBox Grid.Column="3" Grid.Row="1" Margin="5 0 5 5" IsReadOnly="True"
                                        Text="{se:StswBindableParameter Values[IfElse], Mode=TwoWay, Converter={x:Static se:StswIfElseConverter.Instance}, ConverterParameter={Binding Parameters[IfElse]}}"/>
                    </se:StswGrid>
                </StackPanel>
            </se:StswExpander>
        </StackPanel>
    </se:StswScrollView>
</UserControl>
