<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress">
    <!-- ContextMenu -->
    <Style TargetType="ContextMenu">
        <Style.Triggers>
            <!-- light theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                <Setter Property="Background" Value="#F0F0F0"/>
                <Setter Property="BorderBrush" Value="#999"/>
                <Setter Property="Foreground" Value="#212121"/>
            </DataTrigger>
            <!-- dark theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                <Setter Property="Background" Value="#0F0F0F"/>
                <Setter Property="BorderBrush" Value="#666"/>
                <Setter Property="Foreground" Value="#DEDEDE"/>
            </DataTrigger>
        </Style.Triggers>
        <!-- for all themes -->
        <Setter Property="SnapsToDevicePixels" Value="True"/>
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="True"/>
        <Setter Property="HasDropShadow" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="ContextMenu">
                    <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1">
                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- DatePicker -->
    <Style TargetType="DatePicker">
        <Style.Triggers>
            <!-- light theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                <Setter Property="Background" Value="#1FFF"/>
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5 0" StartPoint="0.5 1">
                            <GradientStop Color="#AEAEAE" Offset="0"/>
                            <GradientStop Color="#999999" Offset="0.375"/>
                            <GradientStop Color="#858585" Offset="0.375"/>
                            <GradientStop Color="#757575" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="#333"/>
            </DataTrigger>
            <!-- dark theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                <Setter Property="Background" Value="#1000"/>
                <Setter Property="BorderBrush">
                    <Setter.Value>
                        <LinearGradientBrush EndPoint="0.5 0" StartPoint="0.5 1">
                            <GradientStop Color="#515151" Offset="0"/>
                            <GradientStop Color="#666666" Offset="0.375"/>
                            <GradientStop Color="#7A7A7A" Offset="0.375"/>
                            <GradientStop Color="#8A8A8A" Offset="1"/>
                        </LinearGradientBrush>
                    </Setter.Value>
                </Setter>
                <Setter Property="Foreground" Value="#CCC"/>
            </DataTrigger>
        </Style.Triggers>
        <!-- for all themes -->
        <Setter Property="IsTodayHighlighted" Value="True"/>
        <Setter Property="SelectedDateFormat" Value="Short"/>
        <Setter Property="Padding" Value="2"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="CalendarStyle">
            <Setter.Value>
                <!-- DatePickerCalendar -->
                <Style TargetType="Calendar">
                    <Style.Triggers>
                        <!-- light theme -->
                        <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5 1" StartPoint="0.5 0">
                                        <GradientStop Color="#EAEAEA" Offset="0"/>
                                        <GradientStop Color="#F0F0F0" Offset="0.16"/>
                                        <GradientStop Color="#FCFCFC" Offset="0.16"/>
                                        <GradientStop Color="#FFFFFF" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5 1" StartPoint="0.5 0">
                                        <GradientStop Color="#AEAEAE" Offset="0"/>
                                        <GradientStop Color="#999999" Offset="0.375"/>
                                        <GradientStop Color="#858585" Offset="0.375"/>
                                        <GradientStop Color="#757575" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" Value="#333"/>
                        </DataTrigger>
                        <!-- dark theme -->
                        <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5 1" StartPoint="0.5 0">
                                        <GradientStop Color="#151515" Offset="0"/>
                                        <GradientStop Color="#0F0F0F" Offset="0.16"/>
                                        <GradientStop Color="#030303" Offset="0.16"/>
                                        <GradientStop Color="#000000" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0.5 1" StartPoint="0.5 0">
                                        <GradientStop Color="#515151" Offset="0"/>
                                        <GradientStop Color="#666666" Offset="0.375"/>
                                        <GradientStop Color="#7A7A7A" Offset="0.375"/>
                                        <GradientStop Color="#8A8A8A" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Foreground" Value="#CCC"/>
                        </DataTrigger>
                    </Style.Triggers>
                    <!-- for all themes -->
                    <Setter Property="BorderThickness" Value="1"/>
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Calendar">
                                <StackPanel x:Name="PART_Root" HorizontalAlignment="Center">
                                    <CalendarItem x:Name="PART_CalendarItem" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Style="{TemplateBinding CalendarItemStyle}"/>
                                </StackPanel>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- DatePickerTextBox -->
    <Style TargetType="DatePickerTextBox">
        <Style.Triggers>
            <!-- light theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                <Setter Property="Background" Value="#FFF"/>
                <Setter Property="Foreground" Value="#000"/>
            </DataTrigger>
            <!-- dark theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                <Setter Property="Background" Value="#000"/>
                <Setter Property="Foreground" Value="#FFF"/>
            </DataTrigger>
        </Style.Triggers>
        <!-- for all themes -->
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="DatePickerTextBox">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                    <VisualTransition GeneratedDuration="0:0:0.1" To="MouseOver"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="ContentElement" To="{Binding cDatePickerTextBoxMouseOverWatermark, Source={x:Static se:Themes.Default}}" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                        <ColorAnimation Duration="0" Storyboard.TargetName="watermark_decorator" To="{Binding cDatePickerTextBoxMouseOverWatermark, Source={x:Static se:Themes.Default}}" Storyboard.TargetProperty="(Border.BorderBrush).(SolidColorBrush.Color)"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="WatermarkStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unwatermarked"/>
                                <VisualState x:Name="Watermarked">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="ContentElement" To="0" Storyboard.TargetProperty="Opacity"/>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="PART_Watermark" To="1" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                            <VisualStateGroup x:Name="FocusStates">
                                <VisualStateGroup.Transitions>
                                    <VisualTransition GeneratedDuration="0"/>
                                </VisualStateGroup.Transitions>
                                <VisualState x:Name="Unfocused"/>
                                <VisualState x:Name="Focused">
                                    <Storyboard>
                                        <DoubleAnimation Duration="0" Storyboard.TargetName="FocusVisual" To="1" Storyboard.TargetProperty="Opacity"/>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" CornerRadius="1" Opacity="1" Padding="{TemplateBinding Padding}">
                            <Grid x:Name="WatermarkContent" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}">
                                <Border x:Name="ContentElement" BorderBrush="{Binding cDatePickerTextBoxStaticBorderWatermark, Source={x:Static se:Themes.Default}}" BorderThickness="1"/>
                                <Border x:Name="watermark_decorator" BorderBrush="{Binding cDatePickerTextBoxStaticBorderWatermark, Source={x:Static se:Themes.Default}}" BorderThickness="1" Padding="2 0">
                                    <ContentControl x:Name="PART_Watermark" Focusable="False" IsHitTestVisible="False" Opacity="0" Padding="2"/>
                                </Border>
                                <ScrollViewer x:Name="PART_ContentHost" HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="0" VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                <Border x:Name="FocusVisual" BorderBrush="{Binding cDatePickerTextBoxStaticBorderHost, Source={x:Static se:Themes.Default}}" CornerRadius="1" IsHitTestVisible="False" Opacity="0"/>
                            </Grid>
                        </Border>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- Label -->
    <Style TargetType="Label">
        <Style.Triggers>
            <!-- light theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                <Setter Property="Foreground" Value="#000"/>
            </DataTrigger>
            <!-- dark theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                <Setter Property="Foreground" Value="#FFF"/>
            </DataTrigger>
            <!-- for all themes -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#A777"/>
            </Trigger>
        </Style.Triggers>
        <!-- for all themes -->
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    <!-- MenuItem -->
    <!--
    <Style TargetType="{x:Type se:ExtMenuItem}">
        <Style.Triggers>
            <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                <Setter Property="Control.Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="MenuItem}">
                            <Border x:Name="templateRoot" SnapsToDevicePixels="true"
                                        BorderThickness="{TemplateBinding Control.BorderThickness}"
                                        Background="{TemplateBinding Control.Background}"
                                        BorderBrush="{TemplateBinding Control.BorderBrush}">
                                <Grid VerticalAlignment="Center">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <ContentPresenter x:Name="Icon" ContentSource="Icon" 
                                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" VerticalAlignment="Center"
                                                          HorizontalAlignment="Center" Width="16" Height="16" Margin="3"/>
                                    <Path x:Name="GlyphPanel" Data="F1 M 10.0,1.2 L 4.7,9.1 L 4.5,9.1 L 0,5.2 L 1.3,3.5 L 4.3,6.1L 8.3,0 L 10.0,1.2 Z" FlowDirection="LeftToRight" Margin="3"
                                              Visibility="Collapsed" VerticalAlignment="Center" Fill="{TemplateBinding Control.Foreground}"/>
                                    <ContentPresenter Grid.Column="1" ContentSource="Header" RecognizesAccessKey="true"
                                                          Margin="{TemplateBinding Control.Padding}"
                                                          SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                    <Popup x:Name="PART_Popup" AllowsTransparency="true" Focusable="false"
                                               PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                                               Placement="Bottom"
                                               IsOpen="{Binding IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}"
                                               PlacementTarget="{Binding ElementName=templateRoot}">
                                        <Border x:Name="SubMenuBorder" Background="Red" BorderBrush="Red"
                                                    BorderThickness="1" Padding="2">
                                            <ScrollViewer x:Name="SubMenuScrollViewer"
                                                             Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                                <Grid RenderOptions.ClearTypeHint="Enabled">
                                                    <Canvas Height="0" Width="0" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                        <Rectangle Name="OpaqueRect" Height="{Binding ElementName=SubMenuBorder, Path=ActualHeight}"
                                                                         Width="{Binding ElementName=SubMenuBorder, Path=ActualWidth}"
                                                                         Fill="{Binding ElementName=SubMenuBorder, Path=Background}"/>
                                                    </Canvas>
                                                    <Rectangle HorizontalAlignment="Left" Width="1" Margin="29,2,0,2" Fill="#FFD7D7D7"/>
                                                    <ItemsPresenter x:Name="ItemsPresenter" KeyboardNavigation.DirectionalNavigation="Cycle"
                                                                        KeyboardNavigation.TabNavigation="Cycle" Grid.IsSharedSizeScope="true"
                                                                        SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                </Grid>
                                            </ScrollViewer>
                                        </Border>
                                    </Popup>
                                </Grid>
                            </Border>
                            <ControlTemplate.Triggers>
                                <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                                    <Setter TargetName="PART_Popup" Property="Popup.PopupAnimation" Value="None"/>
                                </Trigger>
                                <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsChecked" Value="true">
                                    <Setter TargetName="GlyphPanel" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger Property="MenuItem.IsHighlighted" Value="true">
                                    <Setter TargetName="templateRoot" Value="#3D26A0DA" Property="Border.Background"/>
                                    <Setter TargetName="templateRoot" Value="#FF26A0DA" Property="Border.BorderBrush"/>
                                </Trigger>
                                <Trigger Property="UIElement.IsEnabled" Value="false">
                                    <Setter TargetName="templateRoot" Value="#FF707070" Property="TextElement.Foreground"/>
                                    <Setter TargetName="GlyphPanel" Value="#FF707070" Property="Shape.Fill"/>
                                </Trigger>
                                <Trigger SourceName="SubMenuScrollViewer" Property="ScrollViewer.CanContentScroll" Value="false">
                                    <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=VerticalOffset}"
                                                Property="Canvas.Top"/>
                                    <Setter TargetName="OpaqueRect" Value="{Binding ElementName=SubMenuScrollViewer, Path=HorizontalOffset}"
                                                Property="Canvas.Left"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <Style TargetType="{x:Type se:ExtMenuItem}">
        <Setter Property="OverridesDefaultStyle" Value="True"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="MenuItem">
                    <Border x:Name="Border" BorderThickness="1">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Icon"/>
                                <ColumnDefinition Width="*"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="Shortcut"/>
                                <ColumnDefinition Width="13"/>
                            </Grid.ColumnDefinitions>
                            <TextBlock x:Name="CheckMark" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Text="✓"/>
                            <ContentPresenter x:Name="Icon" Margin="5 0" VerticalAlignment="Center" ContentSource="Icon" Width="20"/>
                            <ContentPresenter x:Name="HeaderHost" Grid.Column="1" ContentSource="Header" RecognizesAccessKey="True" VerticalAlignment="Center"/>
                            <TextBlock x:Name="InputGestureText" Grid.Column="2" Text="{TemplateBinding InputGestureText}" Margin="5 2 2 2" DockPanel.Dock="Right"/>
                            <Path x:Name="ExpandMark" Grid.Column="3" Visibility="Collapsed" HorizontalAlignment="Center" VerticalAlignment="Center" Data="M 0 0 L 0 7 L 4 3.5 Z" Fill="{Binding cWindowForeground, Source={x:Static se:Themes.Default}}"/>
                            <Popup x:Name="Popup" Placement="Right" HorizontalOffset="-4" IsOpen="{TemplateBinding IsSubmenuOpen}" AllowsTransparency="True" Focusable="False" PopupAnimation="Fade">
                                <Border x:Name="SubmenuBorder" SnapsToDevicePixels="True" Background="{Binding cMenuStaticBackground, Source={x:Static se:Themes.Default}}" BorderThickness="1" BorderBrush="Gray">
                                    <ScrollViewer CanContentScroll="True" VerticalScrollBarVisibility="Auto">
                                        <StackPanel IsItemsHost="True" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                    </ScrollViewer>
                                </Border>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="Icon" Value="{x:Null}">
                            <Setter TargetName="Icon" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="IsHighlighted" Value="True">
                            <Setter Property="Background" TargetName="Border" Value="#76AE"/>
                            <Setter Property="BorderBrush" TargetName="Border" Value="#7357"/>
                        </Trigger>
                        <Trigger Property="Role" Value="SubmenuHeader">
                            <Setter TargetName="ExpandMark" Property="Visibility" Value="Visible"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="Gray"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    -->
    <!-- TabControl -->
    <Style TargetType="TabControl">
        <Style.Triggers>
            <!-- light theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                <Setter Property="Background" Value="#FFF"/>
                <Setter Property="BorderBrush" Value="#ACACAC"/>
                <Setter Property="Foreground" Value="#000"/>
            </DataTrigger>
            <!-- dark theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                <Setter Property="Background" Value="#000"/>
                <Setter Property="BorderBrush" Value="#535353"/>
                <Setter Property="Foreground" Value="#FFF"/>
            </DataTrigger>
            <!-- for all themes -->
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="TextElement.Foreground" Value="#A777"/>
            </Trigger>
        </Style.Triggers>
        <!-- for all themes -->
        <Setter Property="ItemContainerStyle">
            <Setter.Value>
                <!-- TabItem -->
                <Style TargetType="TabItem">
                    <Style.Triggers>
                        <!-- light theme -->
                        <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0 1" StartPoint="0 0">
                                        <GradientStop Color="#F0F0F0" Offset="0.0"/>
                                        <GradientStop Color="#E5E5E5" Offset="1.0"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" Value="#ACACAC"/>
                            <Setter Property="Foreground" Value="#000"/>
                        </DataTrigger>
                        <!-- dark theme -->
                        <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush EndPoint="0 1" StartPoint="0 0">
                                        <GradientStop Color="#0F0F0F" Offset="0.0"/>
                                        <GradientStop Color="#1A1A1A" Offset="1.0"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="BorderBrush" Value="#535353"/>
                            <Setter Property="Foreground" Value="#FFF"/>
                        </DataTrigger>
                    </Style.Triggers>
                    <!-- for all themes -->
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="TabItem">
                                <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                                    <Border x:Name="mainBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="1 1 1 0" Margin="0">
                                        <Border x:Name="innerBorder" Background="{Binding cTabItemSelectedBackground, Source={x:Static se:Themes.Default}}" BorderBrush="{Binding cTabItemSelectedBorder, Source={x:Static se:Themes.Default}}" BorderThickness="1 1 1 0" Margin="-1" Opacity="0"/>
                                    </Border>
                                    <ContentPresenter x:Name="contentPresenter" ContentSource="Header" Focusable="False" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ItemsControl}}}"/>
                                </Grid>
                                <ControlTemplate.Triggers>
                                    <Trigger Property="IsMouseOver" Value="True">
                                        <Setter Property="Background" TargetName="mainBorder">
                                            <Setter.Value>
                                                <LinearGradientBrush EndPoint="0 1" StartPoint="0 0">
                                                    <GradientStop Color="{Binding cTabItemMouseOverBackground1, Source={x:Static se:Themes.Default}}" Offset="0.0"/>
                                                    <GradientStop Color="{Binding cTabItemMouseOverBackground2, Source={x:Static se:Themes.Default}}" Offset="1.0"/>
                                                </LinearGradientBrush>
                                            </Setter.Value>
                                        </Setter>
                                        <Setter Property="BorderBrush" TargetName="mainBorder" Value="{Binding cTabItemMouseOverBorder, Source={x:Static se:Themes.Default}}"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="1"/>
                                    </Trigger>
                                    <Trigger Property="IsEnabled" Value="False">
                                        <Setter Property="Opacity" TargetName="contentPresenter" Value="0.56"/>
                                        <Setter Property="Background" TargetName="mainBorder" Value="{Binding cTabItemDisabledBackground, Source={x:Static se:Themes.Default}}"/>
                                        <Setter Property="BorderBrush" TargetName="mainBorder" Value="{Binding cTabItemDisabledBorder, Source={x:Static se:Themes.Default}}"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="1"/>
                                    </Trigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Left"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="1 1 0 1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="1 1 0 1"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Left"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Panel.ZIndex" Value="1"/>
                                        <Setter Property="Margin" Value="-2 -2 0 -2"/>
                                        <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="1 1 0 1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="1 1 0 1"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Bottom"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="1 0 1 1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="1 0 1 1"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Bottom"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Panel.ZIndex" Value="1"/>
                                        <Setter Property="Margin" Value="-2 0 -2 -2"/>
                                        <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="1 0 1 1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="1 0 1 1"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Right"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="0 1 1 1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="0 1 1 1"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Right"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Panel.ZIndex" Value="1"/>
                                        <Setter Property="Margin" Value="0 -2 -2 -2"/>
                                        <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="0 1 1 1"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="0 1 1 1"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="False"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Top"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="1 1 1 0"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="1 1 1 0"/>
                                    </MultiDataTrigger>
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                            <Condition Binding="{Binding TabStripPlacement, RelativeSource={RelativeSource AncestorType=TabControl}}" Value="Top"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="Panel.ZIndex" Value="1"/>
                                        <Setter Property="Margin" Value="-2 -2 -2 0"/>
                                        <Setter Property="Opacity" TargetName="innerBorder" Value="1"/>
                                        <Setter Property="BorderThickness" TargetName="innerBorder" Value="1 1 1 0"/>
                                        <Setter Property="BorderThickness" TargetName="mainBorder" Value="1 1 1 0"/>
                                    </MultiDataTrigger>
                                </ControlTemplate.Triggers>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </Style>
            </Setter.Value>
        </Setter>
    </Style>
    <!-- TextBox -->
    <Style TargetType="{x:Type se:ExtTextBox}">
        <Style.Triggers>
            <!-- light theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                <Setter Property="Background" Value="#FFF"/>
                <Setter Property="BorderBrush" Value="#ADADAD"/>
                <Setter Property="Foreground" Value="#000"/>
            </DataTrigger>
            <!-- dark theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                <Setter Property="Background" Value="#000"/>
                <Setter Property="BorderBrush" Value="#525252"/>
                <Setter Property="Foreground" Value="#FFF"/>
            </DataTrigger>
            <!-- for all themes -->
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsInactiveSelectionHighlightEnabled" Value="True"/>
                    <Condition Property="IsSelectionActive" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="SelectionBrush" Value="#7777"/>
            </MultiTrigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Opacity" Value="0.56"/>
            </Trigger>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="BorderBrush" Value="#7EB4EA"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocused" Value="True">
                <Setter Property="BorderBrush" Value="#569DE5"/>
            </Trigger>
        </Style.Triggers>
    </Style>
    <!-- ToolTip -->
    <Style TargetType="ToolTip">
        <Style.Triggers>
            <!-- light theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="0">
                <Setter Property="Background" Value="#F0F0F0"/>
                <Setter Property="BorderBrush" Value="#999"/>
                <Setter Property="Foreground" Value="#212121"/>
            </DataTrigger>
            <!-- dark theme -->
            <DataTrigger Binding="{Binding Theme, Source={x:Static se:Themes.Default}}" Value="1">
                <Setter Property="Background" Value="#0F0F0F"/>
                <Setter Property="BorderBrush" Value="#666"/>
                <Setter Property="Foreground" Value="#DEDEDE"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>