<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress">
    
    <!-- LoadingCircle -->
    <Style TargetType="{x:Type se:LoadingCircle}">
        <Setter Property="ForegroundDisabled" Value="#7777"/>
        
        <Setter Property="Scale" Value="auto"/>
    </Style>
    
    <!-- StswButton -->
    <Style TargetType="{x:Type se:StswButton}" BasedOn="{StaticResource {x:Type Button}}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?65}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundPressed" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderBrushDefaulted" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswCheckBox -->
    <Style TargetType="{x:Type se:StswCheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
        <Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}"/>
        <Setter Property="BackgroundUnchecked" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BackgroundChecked" Value="{Binding BackgroundUnchecked, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BackgroundIndeterminate" Value="{Binding BackgroundChecked, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="BorderBrushUnchecked" Value="{Binding BackgroundUnchecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="BorderBrushChecked" Value="{Binding BackgroundChecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="BorderBrushIndeterminate" Value="{Binding BackgroundIndeterminate, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="GlyphBrush" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>
        <Setter Property="GlyphBrushDisabled" Value="#7777"/>

        <Setter Property="BackgroundUncheckedMouseOver" Value="{Binding BackgroundUnchecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BackgroundCheckedMouseOver" Value="{Binding BackgroundChecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BackgroundIndeterminateMouseOver" Value="{Binding BackgroundIndeterminate, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushUncheckedMouseOver" Value="{Binding BorderBrushUnchecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushCheckedMouseOver" Value="{Binding BorderBrushChecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushIndeterminateMouseOver" Value="{Binding BorderBrushIndeterminate, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="GlyphBrushMouseOver" Value="{Binding GlyphBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>

        <Setter Property="BackgroundUncheckedPressed" Value="{Binding BackgroundUncheckedMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BackgroundCheckedPressed" Value="{Binding BackgroundCheckedMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BackgroundIndeterminatePressed" Value="{Binding BackgroundIndeterminateMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushUncheckedPressed" Value="{Binding BorderBrushUncheckedMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushCheckedPressed" Value="{Binding BorderBrushCheckedMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushIndeterminatePressed" Value="{Binding BorderBrushIndeterminateMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundPressed" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="GlyphBrushPressed" Value="{Binding GlyphBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>

        <Setter Property="IconIndeterminate" Value="{x:Static se:StswIcons.Minus}"/>
        <Setter Property="IconUnchecked" Value="{x:Null}"/>
        <Setter Property="IconChecked" Value="{x:Static se:StswIcons.Check}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswColumnFilter -->
    <Style TargetType="{x:Type se:StswColumnFilter}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.1}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter='0.5 0 0 0'}"/>
        <Setter Property="Margin" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="FilterVisibility" Value="{Binding AreFiltersVisible, RelativeSource={RelativeSource AncestorType={x:Type se:StswDataGrid}}, Converter={x:Static se:conv_Bool.Conv}, FallbackValue=Visible}"/>
        <!--
        <Setter Property="RefreshCommand" Value="{Binding RefreshCommand, RelativeSource={RelativeSource AncestorType={x:Type se:StswDataGrid}}, FallbackValue={x:Null}}"/>
        -->
    </Style>

    <!-- StswComboBox -->
    <Style TargetType="{x:Type se:StswComboBox}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?65}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?15}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="PopupBorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter='1 0 0 0'}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswDataGrid (in xaml file) -->

    <!-- StswDateBox -->
    <Style TargetType="{x:Type se:StswDateBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ForegroundPlaceholder" Value="#7777"/>
        <Setter Property="Placeholder" Value="Wybierz datę..."/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?15}"/>
        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundFocused" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushFocused" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundFocused" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter='1 0 0 0'}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="Format" Value="d"/>
        <Setter Property="IncrementType" Value="Day"/>

        <Setter Property="ButtonsAlignment" Value="Right"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    
    <!-- StswExpander -->
    <Style TargetType="{x:Type se:StswExpander}" BasedOn="{StaticResource {x:Type Expander}}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="SubBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="SubBackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="SubForegroundDisabled" Value="#7777"/>

        <Setter Property="SubBackgroundMouseOver" Value="{Binding SubBackground, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="SubForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="SubBackgroundPressed" Value="{Binding SubBackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="SubForegroundPressed" Value="{Binding SubForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="SubBackgroundChecked" Value="{Binding SubBackground, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-50}"/>
        <Setter Property="BorderBrushChecked" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-50}"/>
        <Setter Property="SubForegroundChecked" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Bottom, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter='0 0 0 1'}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>
        <Setter Property="SubPadding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

    <!-- StswGroupBox -->
    <Style TargetType="{x:Type se:StswGroupBox}" BasedOn="{StaticResource {x:Type GroupBox}}">
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        
        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15 0}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="SubCornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="SubMargin" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75 0 0 0}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.5}"/>

        <Setter Property="SubHorizontalAlignment" Value="Left"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

    <!-- StswHeader -->
    <Style TargetType="{x:Type se:StswHeader}">
        <Setter Property="ForegroundDisabled" Value="#7777"/>
        
        <Setter Property="IconForeground" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="IconScale" Value="1.5"/>

        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>
        <Setter Property="ContentMargin" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.3 0.1}"/>
        <Setter Property="ContentVisibility" Value="Visible"/>

        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswIcon -->
    <Style TargetType="{x:Type se:StswIcon}">
        <Setter Property="ForegroundDisabled" Value="#7777"/>
        
        <Setter Property="CanvasSize" Value="24"/>
        <Setter Property="Scale" Value="auto"/>
    </Style>

    <!-- StswImage -->
    <Style TargetType="{x:Type se:StswImage}">
        <Setter Property="Background" Value="Transparent"/>
        
        <Setter Property="OpacityDisabled" Value="0.3"/>

        <Setter Property="MenuMode" Value="Disabled"/>
        <Setter Property="Scale" Value="auto"/>
        <Setter Property="Stretch" Value="Uniform"/>
    </Style>

    <!-- StswNavigation -->
    <Style TargetType="{x:Type se:StswNavigation}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}"/>

        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="SubBorderThickness" Value="0.5"/>
        <Setter Property="CornerRadius" Value="0"/>
        
        <Setter Property="ExtendedMode" Value="True"/>
    </Style>

    <!-- StswNavigationElement -->
    <Style TargetType="{x:Type se:StswNavigationElement}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?65}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundPressed" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundChecked" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-50}"/>
        <Setter Property="BorderBrushChecked" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-50}"/>
        <Setter Property="ForegroundChecked" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="PopupBorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Bottom, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.5}"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.5}"/>

        <Setter Property="IconForeground" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="IconScale" Value="1.5"/>
        <Setter Property="TextMargin" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.3 0.1}"/>

        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswNumericBox -->
    <Style TargetType="{x:Type se:StswNumericBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ForegroundPlaceholder" Value="#7777"/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?15}"/>
        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundFocused" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushFocused" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundFocused" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter='1 0 0 0'}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="Increment" Value="1"/>

        <Setter Property="ButtonsAlignment" Value="Right"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswPasswordBox -->
    <Style TargetType="{x:Type se:StswPasswordBox}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ForegroundPlaceholder" Value="#7777"/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?15}"/>
        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundFocused" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushFocused" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundFocused" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="ButtonsAlignment" Value="Right"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswProgressBar -->
    <Style TargetType="{x:Type se:StswProgressBar}" BasedOn="{StaticResource {x:Type ProgressBar}}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?65}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>
        <Setter Property="OpacityDisabled" Value="0.15"/>

        <Setter Property="ForegroundReady" Value="#7777"/>
        <Setter Property="ForegroundRunning" Value="#92B2"/>
        <Setter Property="ForegroundPaused" Value="#9BB2"/>
        <Setter Property="ForegroundError" Value="#9C33"/>

        <Setter Property="IsTrackTransparent" Value="False"/>
        <Setter Property="State" Value="Running"/>
        <Setter Property="TextInPercents" Value="True"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.1}"/>

        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
    </Style>

    <!-- StswRadioBox -->
    <Style TargetType="{x:Type se:StswRadioBox}" BasedOn="{StaticResource {x:Type RadioButton}}">
        <Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}"/>
        <Setter Property="BackgroundUnchecked" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BackgroundChecked" Value="{Binding BackgroundUnchecked, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BackgroundIndeterminate" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="BorderBrushUnchecked" Value="{Binding BackgroundUnchecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="BorderBrushChecked" Value="{Binding GlyphBrush, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushIndeterminate" Value="{Binding BackgroundIndeterminate, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="GlyphBrush" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>
        <Setter Property="GlyphBrushDisabled" Value="#7777"/>

        <Setter Property="BackgroundUncheckedMouseOver" Value="{Binding BackgroundUnchecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BackgroundCheckedMouseOver" Value="{Binding BackgroundChecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BackgroundIndeterminateMouseOver" Value="{Binding BackgroundIndeterminate, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushUncheckedMouseOver" Value="{Binding BorderBrushUnchecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushCheckedMouseOver" Value="{Binding BorderBrushChecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushIndeterminateMouseOver" Value="{Binding BorderBrushIndeterminate, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="GlyphBrushMouseOver" Value="{Binding GlyphBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>

        <Setter Property="BackgroundUncheckedPressed" Value="{Binding BackgroundUncheckedMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BackgroundCheckedPressed" Value="{Binding BackgroundCheckedMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BackgroundIndeterminatePressed" Value="{Binding BackgroundIndeterminateMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushUncheckedPressed" Value="{Binding BorderBrushUncheckedMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushCheckedPressed" Value="{Binding BorderBrushCheckedMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushIndeterminatePressed" Value="{Binding BorderBrushIndeterminateMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundPressed" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="GlyphBrushPressed" Value="{Binding GlyphBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>

        <Setter Property="IconIndeterminate" Value="{x:Static se:StswIcons.CircleOutline}"/>
        <Setter Property="IconUnchecked" Value="{x:Null}"/>
        <Setter Property="IconChecked" Value="{x:Static se:StswIcons.Circle}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswRepeatButton -->
    <Style TargetType="{x:Type se:StswRepeatButton}" BasedOn="{StaticResource {x:Type RepeatButton}}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?65}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundPressed" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderBrushDefaulted" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    
    <!-- StswSeparator -->
    <Style TargetType="{x:Type se:StswSeparator}" BasedOn="{StaticResource {x:Type Separator}}">
        <Setter Property="BorderBrush" Value="{DynamicResource TextBox.Static.Border}"/>
        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.075}"/>
        <Setter Property="CornerRadius" Value="1"/>
        
        <Setter Property="Orientation" Value="Horizontal"/>
    </Style>
    
    <!-- StswTextBox -->
    <Style TargetType="{x:Type se:StswTextBox}" BasedOn="{StaticResource {x:Type TextBox}}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ForegroundPlaceholder" Value="#7777"/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?15}"/>
        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundFocused" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushFocused" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundFocused" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="ButtonsAlignment" Value="Right"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswTextEditor -->
    <Style TargetType="{x:Type se:StswTextEditor}" BasedOn="{StaticResource {x:Type RichTextBox}}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?85}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        
        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?15}"/>
        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundFocused" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushFocused" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundFocused" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Bottom, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter='0 0 0 1'}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="ButtonsAlignment" Value="Top"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
    </Style>

    <!-- StswToggleButton -->
    <Style TargetType="{x:Type se:StswToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?65}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-30}"/>
        <Setter Property="ForegroundMouseOver" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-20}"/>
        <Setter Property="ForegroundPressed" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BackgroundChecked" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-50}"/>
        <Setter Property="BorderBrushChecked" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=-50}"/>
        <Setter Property="ForegroundChecked" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderBrushDefaulted" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>

        <Setter Property="SubBorderBrush" Value="{Binding BorderBrushChecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Color.Conv}, ConverterParameter=!}"/>
        <Setter Property="SubBorderVisibility" Value="{Binding IsChecked, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Bool.Conv}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Bottom, RelativeSource={RelativeSource Self}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=1.35}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.75}"/>
        <Setter Property="SubCornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.60}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswWindow -->
    <Style TargetType="{x:Type se:StswWindow}">
        
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderBrush" Value="{Binding Source={x:Static SystemParameters.WindowGlassColor}, Converter={x:Static se:conv_ColorBrightness.Conv}}"/>
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
        <Setter Property="FontSize" Value="{Binding iSize, Source={x:Static se:Settings.Default}}"/>
        <Setter Property="WindowStyle" Value="None"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswWindow}">
                    <!-- window border -->
                    <se:ClippingBorder>
                        <se:ClippingBorder.Resources>
                            <Style TargetType="{x:Type se:ClippingBorder}">
                                <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Setter Property="CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource TemplatedParent}}" Value="False">
                                        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_ColorBrightness.Conv}, ConverterParameter=?10%}"/>
                                    </DataTrigger>
                                    <DataTrigger Binding="{Binding WindowState, RelativeSource={RelativeSource TemplatedParent}}" Value="Maximized">
                                        <Setter Property="BorderThickness" Value="0"/>
                                        <Setter Property="CornerRadius" Value="0"/>
                                    </DataTrigger>
                                </Style.Triggers>
                            </Style>
                        </se:ClippingBorder.Resources>
                        <Grid>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="auto"/>
                                <RowDefinition/>
                            </Grid.RowDefinitions>
                            <!-- title bar -->
                            <Grid x:Name="PART_TitleBar" Background="{TemplateBinding Background}">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition/>
                                    <ColumnDefinition Width="auto"/>
                                </Grid.ColumnDefinitions>
                                <!-- icon & title -->
                                <se:StswHeader x:Name="PART_MoveRectangle"
                                               Grid.ColumnSpan="2"
                                               BorderBrush="{DynamicResource TextBox.Static.Border}"
                                               BorderThickness="0 0 0 0.5"
                                               IconSource="{TemplateBinding Icon}"
                                               IconScale="{x:Null}">
                                    <StackPanel>
                                        <TextBlock Text="{TemplateBinding Title}"/>
                                        <TextBlock Text="{TemplateBinding SubTitle}"
                                                   Opacity="0.6"
                                                   FontSize="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.8}">
                                            <TextBlock.Style>
                                                <Style TargetType="{x:Type TextBlock}">
                                                    <Style.Triggers>
                                                        <DataTrigger Binding="{Binding SubTitle, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                        <DataTrigger Binding="{Binding ShowSubTitle, Source={x:Static se:Settings.Default}}" Value="False">
                                                            <Setter Property="Visibility" Value="Collapsed"/>
                                                        </DataTrigger>
                                                        <MultiDataTrigger>
                                                            <MultiDataTrigger.Conditions>
                                                                <Condition Binding="{Binding SubTitle, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_NotNull.Conv}}" Value="True"/>
                                                                <Condition Binding="{Binding ShowSubTitle, Source={x:Static se:Settings.Default}}" Value="True"/>
                                                            </MultiDataTrigger.Conditions>
                                                            <Setter Property="Visibility" Value="Visible"/>
                                                        </MultiDataTrigger>
                                                    </Style.Triggers>
                                                </Style>
                                            </TextBlock.Style>
                                        </TextBlock>
                                    </StackPanel>
                                    <se:StswHeader.Style>
                                        <Style TargetType="{x:Type se:StswHeader}">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                                                    <Setter Property="Foreground" Value="#B777"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </se:StswHeader.Style>
                                </se:StswHeader>
                                <!-- buttons panel -->
                                <StackPanel x:Name="PART_ButtonsPanel" Grid.Column="1" Orientation="Horizontal">
                                    <StackPanel.Resources>
                                        <!-- buttons style -->
                                        <Style TargetType="{x:Type Button}">
                                            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                                                        <Border Background="{TemplateBinding Background}"
                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                SnapsToDevicePixels="True">
                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                              Content="{TemplateBinding Content}"
										                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
										                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										                                      Margin="{TemplateBinding Padding}"
										                                      RecognizesAccessKey="True"
										                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="FontSize" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=1.25}"/>
                                            <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>
                                            <Setter Property="Width" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=3.75}"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="#7777"/>
                                                </Trigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                        <Condition Property="Name" Value="PART_ButtonClose"/>
                                                    </MultiTrigger.Conditions>
                                                    <MultiTrigger.Setters>
                                                        <Setter Property="Background" Value="Red"/>
                                                    </MultiTrigger.Setters>
                                                </MultiTrigger>
                                            </Style.Triggers>
                                        </Style>
                                        <Style TargetType="{x:Type se:OutlinedTextBlock}">
                                            <Setter Property="Fill" Value="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={x:Static se:conv_IfElse.Conv}, ConverterParameter=True~White~#B777}"/>
                                            <Setter Property="FontFamily" Value="Arial"/>
                                            <Setter Property="Stroke" Value="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={x:Static se:conv_IfElse.Conv}, ConverterParameter=True~Black~Transparent}"/>
                                            <Setter Property="StrokeThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
                                        </Style>
                                    </StackPanel.Resources>
                                    <!-- buttons -->
                                    <ItemsControl ItemsSource="{TemplateBinding Buttons}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                    <Button x:Name="PART_ButtonMinimize"
                                            ToolTip="Minimalizuj"
                                            Visibility="{TemplateBinding ResizeMode, Converter={x:Static se:conv_Compare.Conv}, ConverterParameter=!NoResize}">
                                        <se:OutlinedTextBlock Text="🗕"/>
                                    </Button>
                                    <Button x:Name="PART_ButtonRestore"
                                            ToolTip="{TemplateBinding WindowState, Converter={x:Static se:conv_IfElse.Conv}, ConverterParameter='Maximized~Przywróć w dół~Maksymalizuj'}"
                                            Visibility="{TemplateBinding ResizeMode, Converter={x:Static se:conv_Contains.Conv}, ConverterParameter=CanResize}">
                                        <se:OutlinedTextBlock Text="{TemplateBinding WindowState, Converter={x:Static se:conv_IfElse.Conv}, ConverterParameter=Maximized~🗗~🗖}"/>
                                    </Button>
                                    <Button x:Name="PART_ButtonClose"
                                            ToolTip="Zamknij">
                                        <se:OutlinedTextBlock Text="🗙"/>
                                    </Button>
                                </StackPanel>
                                <!-- context menu -->
                                <Grid.ContextMenu>
                                    <ContextMenu Placement="MousePoint">
                                        <MenuItem Header="Dodatkowe opcje">
                                            <MenuItem x:Name="PART_MenuScaling" Header="Rozmiar">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="{Binding iSize, Source={x:Static se:Settings.Default}, StringFormat={}{0:N0}}" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                                <Slider Width="220" Value="{Binding iSize, Source={x:Static se:Settings.Default}, UpdateSourceTrigger=PropertyChanged}" Minimum="6" Maximum="60" TickFrequency="1" IsSnapToTickEnabled="True"/>
                                            </MenuItem>
                                            <MenuItem x:Name="PART_MenuTheme" Header="Motyw">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="🎨" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                                <MenuItem Header="Automatyczny" IsChecked="{Binding Theme, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Compare.Conv}, ConverterParameter=-1}">
                                                    <MenuItem.Icon>
                                                        <TextBlock Text=" " FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="Jasny" IsChecked="{Binding Theme, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Compare.Conv}, ConverterParameter=0}">
                                                    <MenuItem.Icon>
                                                        <TextBlock Text="☼" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                                <MenuItem Header="Ciemny" IsChecked="{Binding Theme, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Compare.Conv}, ConverterParameter=1}">
                                                    <MenuItem.Icon>
                                                        <TextBlock Text="☽" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                </MenuItem>
                                            </MenuItem>
                                            <MenuItem x:Name="PART_MenuSubtitle" Header="Podtytuł okna" IsCheckable="True" IsChecked="{Binding ShowSubTitle, Mode=TwoWay, Source={x:Static se:Settings.Default}}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="⚎" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem x:Name="PART_MenuFullscreen" Header="Pełny ekran" IsCheckable="True" IsChecked="{TemplateBinding Fullscreen}" InputGestureText="F11" Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Contains}, ConverterParameter=CanResize}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="⛶" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                        </MenuItem>
                                        <Separator/>
                                        <MenuItem x:Name="PART_MenuCenter" Header="Wyśrodkuj na ekranie">
                                            <MenuItem.Icon>
                                                <TextBlock Text="⊡" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem x:Name="PART_MenuDefault" Header="Domyślny rozmiar" Visibility="{TemplateBinding ResizeMode, Converter={x:Static se:conv_Contains.Conv}, ConverterParameter=CanResize}">
                                            <MenuItem.Icon>
                                                <TextBlock Text="↕" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem x:Name="PART_MenuMinimize" Header="Minimalizuj" Visibility="{TemplateBinding ResizeMode, Converter={x:Static se:conv_Compare.Conv}, ConverterParameter=!NoResize}">
                                            <MenuItem.Icon>
                                                <TextBlock Text="🗕" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <MenuItem x:Name="PART_MenuRestore" Header="{TemplateBinding WindowState, Converter={x:Static se:conv_IfElse.Conv}, ConverterParameter='Maximized~Przywróć w dół~Maksymalizuj'}" Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Contains}, ConverterParameter=CanResize}">
                                            <MenuItem.Icon>
                                                <TextBlock Text="{TemplateBinding WindowState, Converter={x:Static se:conv_IfElse.Conv}, ConverterParameter=Maximized~🗗~🗖}" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </MenuItem.Icon>
                                        </MenuItem>
                                        <Separator/>
                                        <MenuItem x:Name="PART_MenuClose" Header="Zamknij">
                                            <MenuItem.Icon>
                                                <TextBlock Text="🗙" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                            </MenuItem.Icon>
                                            <MenuItem.InputGestureText>Alt + F4</MenuItem.InputGestureText>
                                        </MenuItem>
                                    </ContextMenu>
                                </Grid.ContextMenu>
                            </Grid>
                            <!-- content grid -->
                            <Grid Background="{TemplateBinding Background}" Grid.Row="1">
                                <AdornerDecorator>
                                    <ContentPresenter/>
                                </AdornerDecorator>

                                <!-- fullscreen button panel -->
                                <StackPanel x:Name="PART_FullscreenPanel" Orientation="Horizontal" HorizontalAlignment="Right" VerticalAlignment="Top" Visibility="Collapsed">
                                    <StackPanel.Resources>
                                        <!-- buttons style -->
                                        <Style TargetType="{x:Type Button}">
                                            <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                            <Setter Property="Template">
                                                <Setter.Value>
                                                    <ControlTemplate TargetType="{x:Type ButtonBase}">
                                                        <Border Background="{TemplateBinding Background}"
                                                                BorderBrush="{TemplateBinding BorderBrush}"
                                                                SnapsToDevicePixels="True">
                                                            <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                              Content="{TemplateBinding Content}"
										                                      ContentStringFormat="{TemplateBinding ContentStringFormat}"
										                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										                                      Margin="{TemplateBinding Padding}"
										                                      RecognizesAccessKey="True"
										                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                        </Border>
                                                    </ControlTemplate>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter Property="Background" Value="Transparent"/>
                                            <Setter Property="FontSize" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=1.25}"/>
                                            <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.25}"/>
                                            <Setter Property="Width" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=3.75}"/>
                                            <Style.Triggers>
                                                <Trigger Property="IsMouseOver" Value="True">
                                                    <Setter Property="Background" Value="#7777"/>
                                                </Trigger>
                                                <MultiTrigger>
                                                    <MultiTrigger.Conditions>
                                                        <Condition Property="IsMouseOver" Value="True"/>
                                                        <Condition Property="Name" Value="PART_FsButtonClose"/>
                                                    </MultiTrigger.Conditions>
                                                    <MultiTrigger.Setters>
                                                        <Setter Property="Background" Value="Red"/>
                                                    </MultiTrigger.Setters>
                                                </MultiTrigger>
                                            </Style.Triggers>
                                        </Style>
                                        <Style TargetType="{x:Type se:OutlinedTextBlock}">
                                            <Setter Property="Fill" Value="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={x:Static se:conv_IfElse.Conv}, ConverterParameter=True~White~#B777}"/>
                                            <Setter Property="FontFamily" Value="Arial"/>
                                            <Setter Property="Stroke" Value="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={x:Static se:conv_IfElse.Conv}, ConverterParameter=True~Black~Transparent}"/>
                                            <Setter Property="StrokeThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=0.15}"/>
                                        </Style>
                                    </StackPanel.Resources>
                                    <!-- buttons -->
                                    <Button x:Name="PART_FsButtonMinimize"
                                            ToolTip="Minimalizuj"
                                            Visibility="{TemplateBinding ResizeMode, Converter={x:Static se:conv_Compare.Conv}, ConverterParameter=!NoResize}">
                                        <se:OutlinedTextBlock Text="🗕"/>
                                    </Button>
                                    <Button x:Name="PART_FsButtonRestore"
                                            ToolTip="Wyłącz pełny ekran">
                                        <se:OutlinedTextBlock Text="⛶"/>
                                    </Button>
                                    <Button x:Name="PART_FsButtonClose"
                                            ToolTip="Zamknij">
                                        <se:OutlinedTextBlock Text="🗙"/>
                                    </Button>
                                </StackPanel>
                            </Grid>
                        </Grid>
                    </se:ClippingBorder>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>