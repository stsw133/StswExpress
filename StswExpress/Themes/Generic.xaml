<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress">
    
    <!-- StswButton -->
    <Style TargetType="{x:Type se:StswButton}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>

        <Setter Property="BorderBrushDefaulted" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswCheckBox -->
    <Style TargetType="{x:Type se:StswCheckBox}">
        <Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="GlyphBrush" Value="{DynamicResource OptionMark.Static.Glyph}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="GlyphBrushDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>
        <Setter Property="GlyphBrushMouseOver" Value="{Binding GlyphBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>
        <Setter Property="GlyphBrushPressed" Value="{Binding GlyphBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>

        <Setter Property="SymbolUnchecked" Value="❌"/>
        <Setter Property="BackgroundUnchecked" Value="#AA32"/>

        <Setter Property="SymbolChecked" Value="✔"/>
        <Setter Property="BackgroundChecked" Value="#A3A2"/>

        <Setter Property="SymbolIndeterminate" Value="❔"/>
        <Setter Property="BackgroundIndeterminate" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswCheckButton -->
    <Style TargetType="{x:Type se:StswCheckButton}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>

        <Setter Property="BackgroundChecked" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.4}"/>
        <Setter Property="BorderBrushChecked" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.4}"/>
        
        <Setter Property="BorderBrushDefaulted" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswColumnFilter -->
    <Style TargetType="{x:Type se:StswColumnFilter}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        
        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={se:conv_Multiply}, ConverterParameter='0.5 0 0 0'}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>
    </Style>

    <!-- StswComboBox -->
    <Style TargetType="{x:Type se:StswComboBox}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.05}"/>
        
        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="PopupBorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={se:conv_Multiply}, ConverterParameter='1 0 0 0'}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswDatePicker -->
    <Style TargetType="{x:Type se:StswDatePicker}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>

        <Setter Property="BackgroundFocused" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushFocused" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.05}"/>

        <Setter Property="Placeholder" Value="Wybierz datę..."/>
        <Setter Property="ForegroundPlaceholder" Value="#7777"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={se:conv_Multiply}, ConverterParameter='1 0 0 0'}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        
        <Setter Property="SelectedDateFormat" Value="Short"/>
    </Style>

    <!-- StswNavigation -->
    <Style TargetType="{x:Type se:StswNavigation}">
        <Setter Property="Background" Value="#348D"/>
        <Setter Property="BorderBrush" Value="#7777"/>

        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="CornerRadius" Value="0"/>
    </Style>

    <!-- StswNavigationButton -->
    <Style TargetType="{x:Type se:StswNavigationButton}">
        <Setter Property="Background" Value="#348D"/>
        <Setter Property="BorderBrush" Value="#548D"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="Transparent"/>
        <Setter Property="BorderBrushDisabled" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=@22}"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=@55}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=@55}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=@66}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=@66}"/>

        <Setter Property="BackgroundChecked" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=@88}"/>
        <Setter Property="BorderBrushChecked" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=@88}"/>

        <Setter Property="BorderBrushDefaulted" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>

        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.5}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswNumericBox -->
    <Style TargetType="{x:Type se:StswNumericBox}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>

        <Setter Property="BackgroundFocused" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushFocused" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.05}"/>

        <Setter Property="ForegroundPlaceholder" Value="#7777"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="SubBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={se:conv_Multiply}, ConverterParameter='1 0 0 0'}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswRepeatButton -->
    <Style TargetType="{x:Type se:StswRepeatButton}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>

        <Setter Property="BackgroundPressed" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>
        <Setter Property="BorderBrushPressed" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>

        <Setter Property="BorderBrushDefaulted" Value="{DynamicResource {x:Static SystemColors.HighlightBrushKey}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    
    <!-- StswSeparator -->
    <Style TargetType="{x:Type se:StswSeparator}">
        <Setter Property="BorderBrush" Value="{DynamicResource Button.Static.Border}"/>
        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.05}"/>
    </Style>
    
    <!-- StswTextBox -->
    <Style TargetType="{x:Type se:StswTextBox}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BackgroundDisabled" Value="#2777"/>
        <Setter Property="BorderBrushDisabled" Value="#3777"/>
        <Setter Property="ForegroundDisabled" Value="#7777"/>

        <Setter Property="BackgroundMouseOver" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushMouseOver" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.2}"/>

        <Setter Property="BackgroundFocused" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="BorderBrushFocused" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.1}"/>

        <Setter Property="BackgroundReadOnly" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=-0.05}"/>

        <Setter Property="ForegroundPlaceholder" Value="#7777"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswWindow -->
    <Style TargetType="{x:Type se:StswWindow}">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="0" GlassFrameThickness="0" ResizeBorderThickness="0" UseAeroCaptionButtons="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <!-- <Setter Property="BorderBrush" Value="{Binding TitleBarColor, Source={x:Static se:Settings.Default}}"/> -->
        <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderThickness" Value="{Binding WindowState, RelativeSource={RelativeSource Mode=Self}, Converter={se:conv_IfElse}, ConverterParameter=Maximized~0~2}"/>
        <Setter Property="FontSize" Value="{Binding iSize, Source={x:Static se:Settings.Default}}"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswWindow}">
                    <!-- shadow effect as border & real border inside -->
                    <Border Background="Transparent"
                            Padding="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type se:StswWindow}}, Converter={se:conv_IfElse}, ConverterParameter=Maximized~0~5}">
                        <se:ClippingBorder BorderBrush="{TemplateBinding BorderBrush}"
                                           BorderThickness="{TemplateBinding BorderThickness}"
                                           CornerRadius="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type se:StswWindow}}, Converter={se:conv_IfElse}, ConverterParameter=Maximized~0~10}">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="10" Color="Gray" Direction="0" Opacity="1" ShadowDepth="0"/>
                            </Border.Effect>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <!-- chrome -->
                                <Grid x:Name="menuItems" Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <!-- icon & title -->
                                    <se:StswHeader x:Name="moveRectangle" Grid.ColumnSpan="2"
                                                   Padding="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15 0}"
                                                   Text="{TemplateBinding Title}" SubText1="{TemplateBinding SubTitle}"
                                                   IconSource="{TemplateBinding Icon}" SubIconSource="{TemplateBinding SubIcon}"
                                                   IconScale="2" VerticalAlignment="Center">
                                        <se:StswHeader.Style>
                                            <Style TargetType="{x:Type se:StswHeader}">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                                                        <Setter Property="Foreground" Value="#B777"/>
                                                        <Setter Property="SubTextColor1" Value="#7777"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </se:StswHeader.Style>
                                    </se:StswHeader>
                                    <!-- buttons panel -->
                                    <StackPanel x:Name="buttonsPanel" Grid.Column="1" Orientation="Horizontal">
                                        <StackPanel.Resources>
                                            <!-- buttons style -->
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                                                            <Border Background="{TemplateBinding Background}"
                                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                                    SnapsToDevicePixels="True">
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                                  Content="{TemplateBinding Content}"
										                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
										                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										                                          Margin="{TemplateBinding Padding}"
										                                          RecognizesAccessKey="True"
										                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="FontSize" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=1.25}"/>
                                                <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>
                                                <Setter Property="Width" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=3.75}"/>
                                                <Style.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="#7777"/>
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="True"/>
                                                            <Condition Property="Name" Value="closeButton"/>
                                                        </MultiTrigger.Conditions>
                                                        <MultiTrigger.Setters>
                                                            <Setter Property="Background" Value="Red"/>
                                                        </MultiTrigger.Setters>
                                                    </MultiTrigger>
                                                </Style.Triggers>
                                            </Style>
                                            <Style TargetType="{x:Type se:OutlinedTextBlock}">
                                                <Setter Property="Fill" Value="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={se:conv_IfElse}, ConverterParameter=True~White~#B777}"/>
                                                <Setter Property="FontFamily" Value="Arial"/>
                                                <Setter Property="Stroke" Value="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={se:conv_IfElse}, ConverterParameter=True~Black~Transparent}"/>
                                                <Setter Property="StrokeThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
                                            </Style>
                                        </StackPanel.Resources>
                                        <!-- buttons -->
                                        <ItemsControl x:Name="customControls" ItemsSource="{TemplateBinding CustomControls}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>
                                        <Button x:Name="minimizeButton"
                                                ToolTip="Minimalizuj"
                                                Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Compare}, ConverterParameter=!NoResize}">
                                            <se:OutlinedTextBlock Text="🗕"/>
                                        </Button>
                                        <Button x:Name="restoreButton"
                                                ToolTip="{TemplateBinding WindowState, Converter={se:conv_IfElse}, ConverterParameter='Maximized~Przywróć w dół~Maksymalizuj'}"
                                                Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Contains}, ConverterParameter=CanResize}">
                                            <se:OutlinedTextBlock Text="{TemplateBinding WindowState, Converter={se:conv_IfElse}, ConverterParameter=Maximized~🗗~🗖}"/>
                                        </Button>
                                        <Button x:Name="closeButton"
                                                ToolTip="Zamknij">
                                            <se:OutlinedTextBlock Text="🗙"/>
                                        </Button>
                                    </StackPanel>
                                    <Grid.ContextMenu>
                                        <ContextMenu Placement="MousePoint">
                                            <MenuItem Header="Interfejs">
                                                <MenuItem Header="Rozmiar">
                                                    <MenuItem.Icon>
                                                        <TextBlock Text="{Binding iSize, Source={x:Static se:Settings.Default}, StringFormat={}{0:N0}}" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                    <Slider Width="256" Value="{Binding iSize, Source={x:Static se:Settings.Default}, UpdateSourceTrigger=PropertyChanged}" Minimum="4" Maximum="80" TickFrequency="1" IsSnapToTickEnabled="True"/>
                                                </MenuItem>
                                                <MenuItem Header="Motyw">
                                                    <MenuItem.Icon>
                                                        <TextBlock Text="{Binding Theme, Source={x:Static se:Settings.Default}, Converter={se:conv_IfElse}, ConverterParameter=0~☼~☽}" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                    <MenuItem Header="Jasny">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="☼" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                    <MenuItem Header="Ciemny">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="☽" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                </MenuItem>
                                                <!--
                                                <MenuItem Header="Kolor paska">
                                                    <MenuItem.Icon>
                                                        <Rectangle Fill="{Binding TitleBarColor, Mode=OneWay, Source={x:Static se:Settings.Default}}" Height="13" Width="13" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                    <se:ColorPicker AlphaSliderVisibility="Visible" SlidersWidth="256" Color="{Binding TitleBarColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Source={x:Static se:Settings.Default}, Converter={se:conv_Color}, ConverterParameter=$}"/>
                                                </MenuItem>
                                                -->
                                            </MenuItem>
                                            <Separator/>
                                            <MenuItem Header="Wyśrodkuj na ekranie">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="⊡" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Domyślny rozmiar" Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Contains}, ConverterParameter=CanResize}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="↕" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Minimalizuj" Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Compare}, ConverterParameter=!NoResize}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="🗕" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="{TemplateBinding WindowState, Converter={se:conv_IfElse}, ConverterParameter='Maximized~Przywróć w dół~Maksymalizuj'}" Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Contains}, ConverterParameter=CanResize}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="{TemplateBinding WindowState, Converter={se:conv_IfElse}, ConverterParameter=Maximized~🗗~🗖}" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <Separator/>
                                            <MenuItem Header="Zamknij">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="🗙" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                                <MenuItem.InputGestureText>Alt + F4</MenuItem.InputGestureText>
                                            </MenuItem>
                                        </ContextMenu>
                                    </Grid.ContextMenu>
                                </Grid>
                                <!-- content -->
                                <Grid Background="{TemplateBinding Background}" Grid.Row="1">
                                    <AdornerDecorator>
                                        <ContentPresenter/>
                                    </AdornerDecorator>
                                </Grid>
                            </Grid>
                        </se:ClippingBorder>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>