<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress">
    <!-- StswWindow style -->
    <Style TargetType="{x:Type se:StswWindow}">
        <Setter Property="WindowChrome.WindowChrome">
            <Setter.Value>
                <WindowChrome CaptionHeight="0" GlassFrameThickness="0" ResizeBorderThickness="0" UseAeroCaptionButtons="False"/>
            </Setter.Value>
        </Setter>
        <Setter Property="AllowsTransparency" Value="True"/>
        <Setter Property="WindowStyle" Value="None"/>
        <Setter Property="Background" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
        <Setter Property="BorderThickness" Value="{Binding WindowState, RelativeSource={RelativeSource Mode=Self}, Converter={se:conv_StringToString}, ConverterParameter=Maximized~0~2}"/>
        <Setter Property="FontSize" Value="{Binding iSize, Source={x:Static se:Settings.Default}}"/>
        <!-- template -->
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswWindow}">
                    <!-- shadow effect as border & real border inside -->
                    <Border Background="Transparent" Padding="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type se:StswWindow}}, Converter={se:conv_Compare}, ConverterParameter=Maximized~0~5}">
                        <se:ClippingBorder BorderThickness="{TemplateBinding BorderThickness}" BorderBrush="{TemplateBinding BorderBrush}"
                                           CornerRadius="{Binding WindowState, RelativeSource={RelativeSource AncestorType={x:Type se:StswWindow}}, Converter={se:conv_Compare}, ConverterParameter=Maximized~0~10}">
                            <Border.Effect>
                                <DropShadowEffect Color="#7777" ShadowDepth="0" Direction="0" Opacity="1" BlurRadius="10"/>
                            </Border.Effect>
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="auto"/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <!-- chrome -->
                                <Grid x:Name="menuItems">
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition/>
                                        <ColumnDefinition Width="auto"/>
                                    </Grid.ColumnDefinitions>
                                    <Label x:Name="moveRectangle" VerticalContentAlignment="Stretch" Grid.Column="0" Grid.ColumnSpan="2">
                                        <!-- icon & title -->
                                        <DockPanel>
                                            <Grid Margin="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0 0 0.25 0}" VerticalAlignment="Center" Visibility="{TemplateBinding Icon, Converter={se:conv_NotNull}}">
                                                <Image Height="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=1.75}" Source="{TemplateBinding Icon}"/>
                                                <Image Height="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=1}" Margin="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0 0 -0.1 -0.1}" Source="{TemplateBinding SubIcon}" HorizontalAlignment="Right" VerticalAlignment="Bottom"/>
                                            </Grid>
                                            <se:StswSeparator Orientation="Vertical" Margin="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}">
                                                <Separator.Style>
                                                    <Style TargetType="{x:Type Separator}">
                                                        <Style.Triggers>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding Icon, RelativeSource={RelativeSource AncestorType=Window}}" Value="{x:Null}"/>
                                                                    <Condition Binding="{Binding SubIcon, RelativeSource={RelativeSource AncestorType=Window}}" Value="{x:Null}"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </MultiDataTrigger>
                                                            <MultiDataTrigger>
                                                                <MultiDataTrigger.Conditions>
                                                                    <Condition Binding="{Binding Title, RelativeSource={RelativeSource AncestorType=Window}}" Value="{x:Null}"/>
                                                                    <Condition Binding="{Binding SubTitle, RelativeSource={RelativeSource AncestorType=Window}}" Value="{x:Null}"/>
                                                                </MultiDataTrigger.Conditions>
                                                                <Setter Property="Visibility" Value="Collapsed"/>
                                                            </MultiDataTrigger>
                                                        </Style.Triggers>
                                                    </Style>
                                                </Separator.Style>
                                            </se:StswSeparator>
                                            <StackPanel VerticalAlignment="Center">
                                                <TextBlock Text="{TemplateBinding Title}"
                                                           Margin="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.2 0}"/>
                                                <TextBlock Text="{TemplateBinding SubTitle}" Visibility="{TemplateBinding SubTitle, Converter={se:conv_NotNull}}"
                                                           Margin="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.2 -0.1}"
                                                           Foreground="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={se:conv_Bool}, ConverterParameter=#777~#7777}"
                                                           FontSize="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.8}"/>
                                            </StackPanel>
                                        </DockPanel>
                                        <Label.Style>
                                            <Style TargetType="Label">
                                                <Style.Triggers>
                                                    <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}}" Value="False">
                                                        <Setter Property="Foreground" Value="#B777"/>
                                                    </DataTrigger>
                                                </Style.Triggers>
                                            </Style>
                                        </Label.Style>
                                    </Label>
                                    <!-- buttons panel -->
                                    <StackPanel x:Name="buttonsPanel" Grid.Column="1" Orientation="Horizontal" Margin="0 0 0.5 0">
                                        <StackPanel.Resources>
                                            <!-- buttons style -->
                                            <Style TargetType="{x:Type Button}">
                                                <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                                                <Setter Property="Template">
                                                    <Setter.Value>
                                                        <ControlTemplate TargetType="{x:Type ButtonBase}">
                                                            <Border x:Name="Chrome" BorderBrush="{TemplateBinding BorderBrush}" Background="{TemplateBinding Background}" SnapsToDevicePixels="True">
                                                                <ContentPresenter ContentTemplate="{TemplateBinding ContentTemplate}"
                                                                                  Content="{TemplateBinding Content}"
										                                          ContentStringFormat="{TemplateBinding ContentStringFormat}"
										                                          HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
										                                          Margin="{TemplateBinding Padding}"
										                                          RecognizesAccessKey="True"
										                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
										                                          VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                                                            </Border>
                                                        </ControlTemplate>
                                                    </Setter.Value>
                                                </Setter>
                                                <Setter Property="Background" Value="Transparent"/>
                                                <Setter Property="FontSize" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=1.25}"/>
                                                <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>
                                                <Setter Property="Width" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=3.75}"/>
                                                <Style.Triggers>
                                                    <Trigger Property="IsMouseOver" Value="True">
                                                        <Setter Property="Background" Value="#7777"/>
                                                    </Trigger>
                                                    <MultiTrigger>
                                                        <MultiTrigger.Conditions>
                                                            <Condition Property="IsMouseOver" Value="True"/>
                                                            <Condition Property="Name" Value="closeButton"/>
                                                        </MultiTrigger.Conditions>
                                                        <MultiTrigger.Setters>
                                                            <Setter Property="Background" Value="Red"/>
                                                        </MultiTrigger.Setters>
                                                    </MultiTrigger>
                                                </Style.Triggers>
                                            </Style>
                                            <Style TargetType="{x:Type se:OutlinedTextBlock}">
                                                <Setter Property="StrokeThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
                                                <Setter Property="Stroke" Value="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={se:conv_Bool}, ConverterParameter=Black~Transparent}"/>
                                                <Setter Property="Fill" Value="{Binding IsActive, RelativeSource={RelativeSource AncestorType=Window}, Converter={se:conv_Bool}, ConverterParameter=White~#B777}"/>
                                                <Setter Property="FontFamily" Value="Arial"/>
                                            </Style>
                                        </StackPanel.Resources>
                                        <!-- buttons -->
                                        <ItemsControl x:Name="customControls" ItemsSource="{TemplateBinding CustomControls}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>
                                        <Button x:Name="minimizeButton"
                                                ToolTip="Minimalizuj"
                                                Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Compare}, ConverterParameter=!NoResize}">
                                            <se:OutlinedTextBlock Text="🗕"/>
                                        </Button>
                                        <Button x:Name="restoreButton"
                                                ToolTip="{TemplateBinding WindowState, Converter={se:conv_StringToString}, ConverterParameter='Maximized~Przywróć w dół~Maksymalizuj'}"
                                                Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Contains}, ConverterParameter=CanResize}">
                                            <se:OutlinedTextBlock Text="{TemplateBinding WindowState, Converter={se:conv_StringToString}, ConverterParameter=Maximized~🗗~🗖}"/>
                                        </Button>
                                        <Button x:Name="closeButton"
                                                ToolTip="Zamknij">
                                            <se:OutlinedTextBlock Text="🗙"/>
                                        </Button>
                                    </StackPanel>
                                    <Grid.ContextMenu>
                                        <ContextMenu>
                                            <MenuItem Header="Interfejs">
                                                <MenuItem Header="Rozmiar">
                                                    <MenuItem.Icon>
                                                        <TextBlock Text="{Binding iSize, Source={x:Static se:Settings.Default}, StringFormat={}{0:N0}}" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                    <Slider Width="256" Value="{Binding iSize, Source={x:Static se:Settings.Default}, UpdateSourceTrigger=PropertyChanged}" Minimum="4" Maximum="80" TickFrequency="1" IsSnapToTickEnabled="True"/>
                                                </MenuItem>
                                                <MenuItem Header="Motyw">
                                                    <MenuItem.Icon>
                                                        <TextBlock Text="{Binding Theme, Source={x:Static se:Settings.Default}, Converter={se:conv_StringToString}, ConverterParameter=0~☼~☽}" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                    <MenuItem Header="Jasny">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="☼" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                    <MenuItem Header="Ciemny">
                                                        <MenuItem.Icon>
                                                            <TextBlock Text="☽" FontWeight="Bold" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                        </MenuItem.Icon>
                                                    </MenuItem>
                                                </MenuItem>
                                                <MenuItem Header="Kolor paska">
                                                    <MenuItem.Icon>
                                                        <Rectangle Fill="{Binding TitleBarColor, Mode=OneWay, Source={x:Static se:Settings.Default}}" Height="13" Width="13" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                    </MenuItem.Icon>
                                                    <se:ColorPicker AlphaSliderVisibility="Collapsed" SlidersWidth="256" Color="{Binding TitleBarColor, Mode=TwoWay, UpdateSourceTrigger=PropertyChanged, Source={x:Static se:Settings.Default}, Converter={se:conv_Color}, ConverterParameter=$}"/>
                                                </MenuItem>
                                            </MenuItem>
                                            <Separator/>
                                            <MenuItem Header="Wyśrodkuj na ekranie">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="⊡" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Domyślny rozmiar" Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Contains}, ConverterParameter=CanResize}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="↕" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="Minimalizuj" Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Compare}, ConverterParameter=!NoResize}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="🗕" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <MenuItem Header="{TemplateBinding WindowState, Converter={se:conv_StringToString}, ConverterParameter='Maximized~Przywróć w dół~Maksymalizuj'}" Visibility="{TemplateBinding ResizeMode, Converter={se:conv_Contains}, ConverterParameter=CanResize}">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="{TemplateBinding WindowState, Converter={se:conv_StringToString}, ConverterParameter=Maximized~🗗~🗖}" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                            </MenuItem>
                                            <Separator/>
                                            <MenuItem Header="Zamknij">
                                                <MenuItem.Icon>
                                                    <TextBlock Text="🗙" FontWeight="Heavy" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                                </MenuItem.Icon>
                                                <MenuItem.InputGestureText>Alt + F4</MenuItem.InputGestureText>
                                            </MenuItem>
                                        </ContextMenu>
                                    </Grid.ContextMenu>
                                    <Grid.Style>
                                        <Style TargetType="{x:Type Grid}">
                                            <Style.Triggers>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Theme, Source={x:Static se:Settings.Default}}" Value="0"/>
                                                        <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType={x:Type se:StswWindow}}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <RadialGradientBrush>
                                                                <GradientStop Color="{Binding TitleBarColor, Source={x:Static se:Settings.Default}, Converter={se:conv_Color}, ConverterParameter=$0.6}"/>
                                                                <GradientStop Color="#FFF" Offset="2"/>
                                                            </RadialGradientBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Theme, Source={x:Static se:Settings.Default}}" Value="0"/>
                                                        <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType={x:Type se:StswWindow}}}" Value="False"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="#EEE"/>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Theme, Source={x:Static se:Settings.Default}}" Value="1"/>
                                                        <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType={x:Type se:StswWindow}}}" Value="True"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background">
                                                        <Setter.Value>
                                                            <RadialGradientBrush>
                                                                <GradientStop Color="{Binding TitleBarColor, Source={x:Static se:Settings.Default}, Converter={se:conv_Color}, ConverterParameter=$-0.6}"/>
                                                                <GradientStop Color="#000" Offset="2"/>
                                                            </RadialGradientBrush>
                                                        </Setter.Value>
                                                    </Setter>
                                                </MultiDataTrigger>
                                                <MultiDataTrigger>
                                                    <MultiDataTrigger.Conditions>
                                                        <Condition Binding="{Binding Theme, Source={x:Static se:Settings.Default}}" Value="1"/>
                                                        <Condition Binding="{Binding IsActive, RelativeSource={RelativeSource AncestorType={x:Type se:StswWindow}}}" Value="False"/>
                                                    </MultiDataTrigger.Conditions>
                                                    <Setter Property="Background" Value="#111"/>
                                                </MultiDataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Grid.Style>
                                </Grid>
                                <Grid Background="{TemplateBinding Background}" Grid.Row="1">
                                    <AdornerDecorator>
                                        <ContentPresenter/>
                                    </AdornerDecorator>
                                </Grid>
                            </Grid>
                        </se:ClippingBorder>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="True">
                <Setter Property="BorderBrush" Value="{Binding TitleBarColor, Source={x:Static se:Settings.Default}, Converter={se:conv_Color}, ConverterParameter=$0.3}"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsActive, RelativeSource={RelativeSource Mode=Self}}" Value="False">
                <Setter Property="BorderBrush" Value="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- StswButton -->
    <Style TargetType="{x:Type se:StswButton}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>

        <Setter Property="StyleColorDisabledBackground" Value="#2777"/>
        <Setter Property="StyleColorDisabledBorder" Value="#3777"/>

        <Setter Property="StyleColorMouseOverBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>
        <Setter Property="StyleColorMouseOverBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorPressedBackground" Value="{Binding StyleColorMouseOverBackground, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>
        <Setter Property="StyleColorPressedBorder" Value="{Binding StyleColorMouseOverBorder, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswCheckBox -->
    <Style TargetType="{x:Type se:StswCheckBox}">
        <Setter Property="Background" Value="{DynamicResource OptionMark.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>
        <Setter Property="StyleColorGlyph" Value="{DynamicResource OptionMark.Static.Glyph}"/>

        <Setter Property="StyleColorDisabledBackground" Value="#2777"/>
        <Setter Property="StyleColorDisabledBorder" Value="#3777"/>
        <Setter Property="StyleColorDisabledGlyph" Value="#3777"/>

        <Setter Property="StyleColorMouseOverBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorMouseOverBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>
        <Setter Property="StyleColorMouseOverGlyph" Value="{Binding StyleColorGlyph, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorPressedBackground" Value="{Binding StyleColorMouseOverBackground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorPressedBorder" Value="{Binding StyleColorMouseOverBorder, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>
        <Setter Property="StyleColorPressedGlyph" Value="{Binding StyleColorMouseOverGlyph, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorReadOnlyBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.05}"/>
        <Setter Property="StyleColorReadOnlyBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorReadOnlyGlyph" Value="{Binding StyleColorGlyph, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="StyleCharUnchecked" Value="❌"/>
        <Setter Property="StyleColorUncheckedBackground" Value="#7D44"/>

        <Setter Property="StyleCharChecked" Value="✔"/>
        <Setter Property="StyleColorCheckedBackground" Value="#74D4"/>

        <Setter Property="StyleCharIndeterminate" Value="❔"/>
        <Setter Property="StyleColorIndeterminateBackground" Value="{DynamicResource OptionMark.Static.Background}"/>

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswDatePicker -->
    <Style TargetType="{x:Type se:StswDatePicker}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>

        <Setter Property="StyleColorDisabledBackground" Value="#2777"/>
        <Setter Property="StyleColorDisabledBorder" Value="#3777"/>

        <Setter Property="StyleColorMouseOverBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorMouseOverBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorPressedBackground" Value="{Binding StyleColorMouseOverBackground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorPressedBorder" Value="{Binding StyleColorMouseOverBorder, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorReadOnlyBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.05}"/>
        <Setter Property="StyleColorReadOnlyBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="Placeholder" Value="Wybierz datę..."/>
        <Setter Property="StyleColorPlaceholder" Value="#7777"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        
        <Setter Property="SelectedDateFormat" Value="Short"/>
    </Style>

    <!-- StswNumericBox -->
    <Style TargetType="{x:Type se:StswNumericBox}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>

        <Setter Property="StyleColorDisabledBackground" Value="#2777"/>
        <Setter Property="StyleColorDisabledBorder" Value="#3777"/>

        <Setter Property="StyleColorMouseOverBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorMouseOverBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorPressedBackground" Value="{Binding StyleColorMouseOverBackground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorPressedBorder" Value="{Binding StyleColorMouseOverBorder, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorReadOnlyBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.05}"/>
        <Setter Property="StyleColorReadOnlyBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="StyleColorPlaceholder" Value="#7777"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

    <!-- StswRepeatButton -->
    <Style TargetType="{x:Type se:StswRepeatButton}">
        <Setter Property="Background" Value="{DynamicResource Button.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>

        <Setter Property="StyleColorDisabledBackground" Value="#2777"/>
        <Setter Property="StyleColorDisabledBorder" Value="#3777"/>

        <Setter Property="StyleColorMouseOverBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>
        <Setter Property="StyleColorMouseOverBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorPressedBackground" Value="{Binding StyleColorMouseOverBackground, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>
        <Setter Property="StyleColorPressedBorder" Value="{Binding StyleColorMouseOverBorder, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>
    
    <!-- StswTextBox -->
    <Style TargetType="{x:Type se:StswTextBox}">
        <Setter Property="Background" Value="{DynamicResource TextBox.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.3}"/>

        <Setter Property="StyleColorDisabledBackground" Value="#2777"/>
        <Setter Property="StyleColorDisabledBorder" Value="#3777"/>

        <Setter Property="StyleColorMouseOverBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorMouseOverBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorPressedBackground" Value="{Binding StyleColorMouseOverBackground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="StyleColorPressedBorder" Value="{Binding StyleColorMouseOverBorder, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.15}"/>

        <Setter Property="StyleColorReadOnlyBackground" Value="{Binding Background, RelativeSource={RelativeSource Self}, Converter={se:conv_Color}, ConverterParameter=?0.05}"/>
        <Setter Property="StyleColorReadOnlyBorder" Value="{Binding BorderBrush, RelativeSource={RelativeSource Self}}"/>

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="StyleColorPlaceholder" Value="#7777"/>

        <Setter Property="BorderThickness" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.15}"/>
        <Setter Property="CornerRadius" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.75}"/>
        <Setter Property="Padding" Value="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={se:conv_Multiply}, ConverterParameter=0.25}"/>

        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
    </Style>

</ResourceDictionary>