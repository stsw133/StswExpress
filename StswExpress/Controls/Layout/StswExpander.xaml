<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress">

    <Style TargetType="{x:Type se:StswExpander}">
        <Setter Property="Background" Value="{DynamicResource StswExpander.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource StswExpander.Static.Border}"/>

        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="CornerClipping" Value="True"/>
        <Setter Property="CornerRadius" Value="6"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="SeparatorThickness" Value="2"/>

        <Setter Property="Focusable" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="False"/>

        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswExpander}">
                    <!-- main -->
                    <se:StswBorder x:Name="OPT_MainBorder"
                                   Background="{TemplateBinding Background}"
                                   BorderBrush="{TemplateBinding BorderBrush}"
                                   BorderThickness="{TemplateBinding BorderThickness}"
                                   CornerClipping="{TemplateBinding CornerClipping}"
                                   CornerRadius="{TemplateBinding CornerRadius}">
                        <DockPanel>
                            <!-- header -->
                            <se:StswToggleButton x:Name="OPT_Header"
                                                 Background="{DynamicResource StswExpander.Static.Header}"
                                                 FocusVisualStyle="{DynamicResource ExpanderHeaderFocusVisual}"
                                                 FontFamily="{TemplateBinding FontFamily}"
                                                 FontSize="{TemplateBinding FontSize}"
                                                 FontStretch="{TemplateBinding FontStretch}"
                                                 FontStyle="{TemplateBinding FontStyle}"
                                                 FontWeight="{TemplateBinding FontWeight}"
                                                 Foreground="{TemplateBinding Foreground}"
                                                 IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                 Padding="{TemplateBinding Padding}"
                                                 HorizontalContentAlignment="Stretch"
                                                 VerticalContentAlignment="Stretch"
                                                 se:StswControl.IsBorderless="True">
                                <DockPanel>
                                    <DockPanel x:Name="OPT_DropArrowPanel" Visibility="{Binding Visibility, Mode=OneWay, ElementName=OPT_DropArrow}" Width="24">
                                        <se:StswIcon x:Name="OPT_DropArrow" Data="{x:Static se:StswIcons.ChevronDown}" IsRotated="{TemplateBinding IsExpanded}"/>
                                    </DockPanel>
                                    <ContentPresenter Content="{TemplateBinding Header}"
                                                      ContentStringFormat="{TemplateBinding HeaderStringFormat}"
                                                      ContentTemplate="{TemplateBinding HeaderTemplate}"
                                                      ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"/>
                                </DockPanel>
                            </se:StswToggleButton>
                            <!-- separator -->
                            <se:StswSeparator x:Name="OPT_Separator"
                                              BorderBrush="{Binding BorderBrush, ElementName=OPT_MainBorder}"
                                              BorderThickness="{TemplateBinding SeparatorThickness}"
                                              Visibility="Collapsed"/>
                            <!-- content -->
                            <ContentPresenter x:Name="OPT_Content"
                                              Focusable="False"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Visibility="Collapsed"/>
                        </DockPanel>
                    </se:StswBorder>
                    <!-- triggers -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="ExpandDirection" Value="Down">
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="OPT_DropArrowPanel"/>
                            <Setter Property="DockPanel.Dock" Value="Top" TargetName="OPT_Header"/>
                            <Setter Property="DockPanel.Dock" Value="Top" TargetName="OPT_Separator"/>
                            <Setter Property="Orientation" Value="Horizontal" TargetName="OPT_Separator"/>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="OPT_DropArrowPanel"/>
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="OPT_Header"/>
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="OPT_Separator"/>
                            <Setter Property="Orientation" Value="Vertical" TargetName="OPT_Separator"/>
                            <Setter Property="LayoutTransform" TargetName="OPT_DropArrow">
                                <Setter.Value>
                                    <RotateTransform Angle="90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="OPT_DropArrowPanel"/>
                            <Setter Property="DockPanel.Dock" Value="Left" TargetName="OPT_Header"/>
                            <Setter Property="DockPanel.Dock" Value="Left" TargetName="OPT_Separator"/>
                            <Setter Property="Orientation" Value="Vertical" TargetName="OPT_Separator"/>
                            <Setter Property="LayoutTransform" TargetName="OPT_DropArrow">
                                <Setter.Value>
                                    <RotateTransform Angle="-90"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="OPT_DropArrowPanel"/>
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="OPT_Header"/>
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="OPT_Separator"/>
                            <Setter Property="Orientation" Value="Horizontal" TargetName="OPT_Separator"/>
                            <Setter Property="LayoutTransform" TargetName="OPT_DropArrow">
                                <Setter.Value>
                                    <RotateTransform Angle="180"/>
                                </Setter.Value>
                            </Setter>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="False"/>
                                <Condition Property="ExpandDirection" Value="Down"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="VerticalAlignment" Value="Top" TargetName="OPT_MainBorder"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="False"/>
                                <Condition Property="ExpandDirection" Value="Left"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="HorizontalAlignment" Value="Right" TargetName="OPT_MainBorder"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="False"/>
                                <Condition Property="ExpandDirection" Value="Right"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="HorizontalAlignment" Value="Left" TargetName="OPT_MainBorder"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsExpanded" Value="False"/>
                                <Condition Property="ExpandDirection" Value="Up"/>
                            </MultiTrigger.Conditions>
                            <Setter Property="VerticalAlignment" Value="Bottom" TargetName="OPT_MainBorder"/>
                        </MultiTrigger>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_Separator"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_Content"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True" SourceName="OPT_Header">
                            <Setter Property="Background" Value="{DynamicResource StswExpander.MouseOver.Background}" TargetName="OPT_Header"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswExpander.MouseOver.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True" SourceName="OPT_Header">
                            <Setter Property="Background" Value="{DynamicResource StswExpander.Pressed.Background}" TargetName="OPT_Header"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswExpander.Pressed.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True" SourceName="OPT_Header">
                            <Setter Property="Background" Value="{DynamicResource StswExpander.Checked.Background}" TargetName="OPT_Header"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswExpander.Checked.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource StswExpander.Disabled.Background}" TargetName="OPT_Header"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswExpander.Disabled.Border}" TargetName="OPT_MainBorder"/>
                            <Setter Property="TextElement.Foreground" Value="{DynamicResource StswExpander.Disabled.Foreground}" TargetName="OPT_Header"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>