<ComboBox x:Class="StswExpress.StswComboBox"
          xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
          xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
          xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
          xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
          xmlns:se="clr-namespace:StswExpress"
          mc:Ignorable="d">

    <ComboBox.Template>
        <ControlTemplate TargetType="{x:Type ComboBox}">
            <Grid x:Name="templateRoot" SnapsToDevicePixels="True">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"/>
                    <ColumnDefinition MinWidth="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}" Width="0"/>
                </Grid.ColumnDefinitions>
                <ToggleButton x:Name="toggleButton" Grid.ColumnSpan="2"
                              Background="{TemplateBinding Background}"
                              BorderBrush="{TemplateBinding BorderBrush}"
                              BorderThickness="{TemplateBinding BorderThickness}"
                              IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                              Padding="{TemplateBinding Padding}"
                              OverridesDefaultStyle="True" IsTabStop="False" Focusable="False" ClickMode="Press">
                    <ToggleButton.Template>
                        <ControlTemplate TargetType="{x:Type ToggleButton}">
                            <se:ClippingBorder x:Name="templateRoot"
                                               Background="{TemplateBinding Background}"
                                               BorderBrush="{TemplateBinding BorderBrush}"
                                               BorderThickness="{TemplateBinding BorderThickness}"
                                               CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                               SnapsToDevicePixels="True">
                                <DockPanel x:Name="splitBorder">
                                    <Label x:Name="Arrow" Focusable="False"
                                           DockPanel.Dock="{Binding ButtonAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Content="▼" Padding="0"
                                           IsEnabled="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Converter={x:Static se:conv_Bool.Conv}, ConverterParameter=!}"
                                           Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                           Width="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Conv}, ConverterParameter=2}"
                                           HorizontalContentAlignment="Center" VerticalContentAlignment="Center"/>
                                    <Border x:Name="PART_SubBorder"
                                            DockPanel.Dock="{Binding ButtonAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                            BorderBrush="{TemplateBinding BorderBrush}"
                                            BorderThickness="{Binding SubBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                            SnapsToDevicePixels="True"/>
                                    <Grid>
                                        <ContentPresenter x:Name="contentPresenter"
                                                          Content="{Binding SelectionBoxItem, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                          ContentTemplate="{Binding SelectionBoxItemTemplate, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                          ContentTemplateSelector="{Binding ItemTemplateSelector, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                          ContentStringFormat="{Binding SelectionBoxItemStringFormat, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                          IsHitTestVisible="false"
                                                          Margin="{TemplateBinding Padding}"
                                                          SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                          HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                          VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                          Visibility="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Converter={x:Static se:conv_Bool.Conv}, ConverterParameter=!}"/>
                                        <se:StswTextBox x:Name="PART_EditableTextBox"
                                                        AllowDrop="True"
                                                        BackgroundDisabled="Transparent" BorderThickness="0" CornerRadius="0"
                                                        IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                        Padding="{TemplateBinding Padding}"
                                                        Text="{Binding Text, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                        HorizontalContentAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                        VerticalContentAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}"
                                                        Visibility="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}, Converter={x:Static se:conv_Bool.Conv}}"/>
                                    </Grid>
                                </DockPanel>
                            </se:ClippingBorder>
                            <ControlTemplate.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding IsEditable, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="True"/>
                                        <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="False"/>
                                        <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="Background" Value="{DynamicResource ComboBox.Static.Editable.Background}" TargetName="templateRoot" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Editable.Border}" TargetName="templateRoot" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Editable.Border}" TargetName="PART_SubBorder" />
                                    <Setter Property="Background" Value="{DynamicResource ComboBox.Static.Editable.Button.Background}" TargetName="Arrow" />
                                    <Setter Property="BorderBrush" Value="{DynamicResource ComboBox.Static.Editable.Button.Border}" TargetName="Arrow" />
                                </MultiDataTrigger>
                                <Trigger Property="IsMouseOver" Value="True">
                                    <Setter Property="Background" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="templateRoot" />
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="templateRoot" />
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="PART_SubBorder" />
                                </Trigger>
                                <Trigger Property="IsPressed" Value="True">
                                    <Setter Property="Background" Value="{Binding BackgroundPressed, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="templateRoot" />
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="templateRoot" />
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="PART_SubBorder" />
                                </Trigger>
                                <Trigger Property="IsHitTestVisible" Value="False">
                                    <Setter Property="Foreground" Value="{Binding ForegroundDisabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="Arrow" />
                                </Trigger>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" Value="Transparent" TargetName="PART_EditableTextBox" />
                                    <Setter Property="Background" Value="{Binding BackgroundDisabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="templateRoot" />
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrushDisabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="templateRoot" />
                                    <Setter Property="BorderBrush" Value="{Binding BorderBrushDisabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="PART_SubBorder" />
                                    <Setter Property="Foreground" Value="{Binding ForegroundDisabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" TargetName="Arrow" />
                                    <Setter Property="TextElement.Foreground" Value="{Binding ForegroundDisabled, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" />
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </ToggleButton.Template>
                </ToggleButton>
                <Popup x:Name="PART_Popup" Grid.ColumnSpan="2"
                       AllowsTransparency="True"
                       IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                       Margin="0"
                       Placement="Bottom"
                       PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}">
                    <se:ClippingBorder x:Name="DropDownBorder"
                                       Background="{DynamicResource {x:Static SystemColors.WindowBrushKey}}"
                                       BorderBrush="{TemplateBinding BorderBrush}"
                                       BorderThickness="{Binding PopupBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                                       CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                                       MaxHeight="{TemplateBinding MaxDropDownHeight}"
                                       MinWidth="{Binding ActualWidth, ElementName=templateRoot}">
                        <ScrollViewer x:Name="DropDownScrollViewer" VerticalScrollBarVisibility="Auto">
                            <Grid x:Name="grid" RenderOptions.ClearTypeHint="Enabled">
                                <Canvas x:Name="canvas"
                                        HorizontalAlignment="Left" VerticalAlignment="Top"
                                        Height="0" Width="0">
                                    <Rectangle x:Name="OpaqueRect"
                                               Fill="{Binding Background, ElementName=DropDownBorder}"
                                               Height="{Binding ActualHeight, ElementName=DropDownBorder}"
                                               Width="{Binding ActualWidth, ElementName=DropDownBorder}"/>
                                </Canvas>
                                <ItemsPresenter x:Name="ItemsPresenter"
                                                KeyboardNavigation.DirectionalNavigation="Contained"
                                                SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                            </Grid>
                        </ScrollViewer>
                    </se:ClippingBorder>
                </Popup>
            </Grid>
            <ControlTemplate.Triggers>
                <Trigger Property="IsEditable" Value="True">
                    <Setter Property="IsTabStop" Value="False"/>
                    <Setter Property="Padding" Value="2"/>
                </Trigger>
                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                    <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.WindowTextBrushKey}}"/>
                </Trigger>
                <Trigger Property="HasItems" Value="False">
                    <Setter Property="Height" TargetName="DropDownBorder" Value="95"/>
                </Trigger>
                <MultiTrigger>
                    <MultiTrigger.Conditions>
                        <Condition Property="IsGrouping" Value="True" />
                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False" />
                    </MultiTrigger.Conditions>
                    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                </MultiTrigger>
                <Trigger Property="ScrollViewer.CanContentScroll" SourceName="DropDownScrollViewer" Value="False">
                    <Setter Property="Canvas.Top" TargetName="OpaqueRect" Value="{Binding VerticalOffset, ElementName=DropDownScrollViewer}"/>
                    <Setter Property="Canvas.Left" TargetName="OpaqueRect" Value="{Binding HorizontalOffset, ElementName=DropDownScrollViewer}"/>
                </Trigger>
                <Trigger Property="IsReadOnly" Value="True">
                    <Setter Property="IsHitTestVisible" Value="False" TargetName="toggleButton"/>
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </ComboBox.Template>

    <ComboBox.Resources>
        <Style TargetType="{x:Type ComboBoxItem}">
            <Style.Triggers>
                <DataTrigger Binding="{Binding SelectionMode, RelativeSource={RelativeSource AncestorType={x:Type ComboBox}}}" Value="Multiple">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type ComboBoxItem}">
                                <ToggleButton Background="Transparent"
                                              BorderThickness="0"
                                              HorizontalContentAlignment="Left"
                                              Margin="0"
                                              Padding="{TemplateBinding Padding}"
                                              Style="{DynamicResource StswComboBoxItemStyle}">
                                    <ContentPresenter MinHeight="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Add.Conv}, ConverterParameter=2}"/>
                                </ToggleButton>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="StswComboBoxItemStyle" TargetType="{x:Type ToggleButton}" BasedOn="{StaticResource {x:Type ToggleButton}}">
            <Style.Triggers>
                <Trigger Property="IsChecked" Value="True">
                    <Setter Property="FontWeight" Value="Bold"/>
                </Trigger>
            </Style.Triggers>
            <EventSetter Event="Click" Handler="ToggleButton_Click"/>
            <EventSetter Event="Loaded" Handler="ToggleButton_Loaded"/>
        </Style>
    </ComboBox.Resources>
</ComboBox>
