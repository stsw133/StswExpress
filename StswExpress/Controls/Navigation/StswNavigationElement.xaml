<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress">

    <Style TargetType="{x:Type se:StswNavigationElement}">
        
        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.Static.Background}"/>
        <Setter Property="BackgroundMouseOver" Value="{DynamicResource StswNavigationElement.MouseOver.Background}"/>
        <Setter Property="BackgroundPressed" Value="{DynamicResource StswNavigationElement.Pressed.Background}"/>
        <Setter Property="BackgroundChecked" Value="{DynamicResource StswNavigationElement.Checked.Background}"/>
        <Setter Property="BackgroundDisabled" Value="{DynamicResource StswNavigationElement.Disabled.Background}"/>

        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.Static.Border}"/>
        <Setter Property="BorderBrushMouseOver" Value="{DynamicResource StswNavigationElement.MouseOver.Background}"/>
        <Setter Property="BorderBrushPressed" Value="{DynamicResource StswNavigationElement.Pressed.Background}"/>
        <Setter Property="BorderBrushChecked" Value="{DynamicResource StswNavigationElement.Checked.Border}"/>
        <Setter Property="BorderBrushDisabled" Value="{DynamicResource StswNavigationElement.Disabled.Border}"/>

        <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ForegroundMouseOver" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ForegroundPressed" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ForegroundChecked" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="ForegroundDisabled" Value="{DynamicResource StswNavigationElement.Disabled.Foreground}"/>

        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="PopupBorderThickness" Value="2"/>
        <Setter Property="SubBorderThickness" Value="0"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="5"/>
        <Setter Property="SubItemIndentation" Value="22"/>

        <Setter Property="IconFill" Value="{Binding Foreground, RelativeSource={RelativeSource Self}}"/>
        <Setter Property="IconScale" Value="1.5"/>
        <Setter Property="TextMargin" Value="3 1"/>

        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswNavigationElement}">
                    <ContentControl x:Name="PART_ContentControl">
                        <ContentControl.Style>
                            <Style TargetType="{x:Type ContentControl}">
                                <Style.Triggers>
                                    <!-- DropDownButton -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding ContextNamespace, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                            <Condition Binding="{Binding IsCompact, RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                                            <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:StswCompareConverter.Instance}, ConverterParameter=0}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <se:StswToggleButton IsChecked="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}">
                                                        <se:StswToggleButton.Template>
                                                            <ControlTemplate TargetType="{x:Type se:StswToggleButton}">
                                                                <se:StswClippingBorder x:Name="PART_MainBorder"
                                                                                       Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                       BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                       BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                       CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                       SnapsToDevicePixels="True">
                                                                    <ContentPresenter Focusable="False"
                                                                                      Margin="{Binding SubItemPadding, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                      RecognizesAccessKey="True"
                                                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"/>
                                                                </se:StswClippingBorder>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.MouseOver.Background}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.MouseOver.Border}" TargetName="PART_MainBorder" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.Pressed.Background}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.Pressed.Border}" TargetName="PART_MainBorder" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.Checked.Background}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.Checked.Border}" TargetName="PART_MainBorder" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.Disabled.Background}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.Disabled.Border}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="TextElement.Foreground" Value="{DynamicResource StswNavigationElement.Disabled.Foreground}" TargetName="PART_MainBorder" />
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </se:StswToggleButton.Template>
                                                        <Grid>
                                                            <se:StswHeader Content="{Binding Text, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           ContentVisibility="{Binding IsCompact, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}, Converter={x:Static se:StswBoolConverter.Instance}, ConverterParameter=!}"
                                                                           IconData="{Binding IconData, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           IconFill="{Binding IconFill, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           IconScale="{Binding IconScale, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           IconSource="{Binding IconSource, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           IsBusy="{Binding IsBusy, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           Orientation="Horizontal"/>
                                                            <Popup AllowsTransparency="True"
                                                                   DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}"
                                                                   IsOpen="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                   Placement="Bottom"
                                                                   PlacementTarget="{Binding RelativeSource={RelativeSource AncestorType={x:Type se:StswToggleButton}}}"
                                                                   PopupAnimation="{DynamicResource {x:Static SystemParameters.ComboBoxPopupAnimationKey}}"
                                                                   StaysOpen="False">
                                                                <Border BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                        BorderThickness="{Binding PopupBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}">
                                                                    <ScrollViewer VerticalScrollBarVisibility="Auto">
                                                                        <StackPanel>
                                                                            <ItemsControl ItemsSource="{Binding Items, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}">
                                                                                <ItemsControl.Resources>
                                                                                    <Style TargetType="{x:Type se:StswNavigationElement}">
                                                                                        <Setter Property="Container" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type Popup}}, FallbackValue={x:Null}}"/>
                                                                                    </Style>
                                                                                </ItemsControl.Resources>
                                                                            </ItemsControl>
                                                                        </StackPanel>
                                                                    </ScrollViewer>
                                                                </Border>
                                                            </Popup>
                                                        </Grid>
                                                    </se:StswToggleButton>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger>
                                    <!-- StswExpander -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding ContextNamespace, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                            <Condition Binding="{Binding IsCompact, RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                                            <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:StswCompareConverter.Instance}, ConverterParameter=0}" Value="False"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <se:StswExpander ArrowVisibility="{Binding IsCompact, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}, Converter={x:Static se:StswBoolConverter.Instance}, ConverterParameter=!}"
                                                                     Background="Transparent"
                                                                     BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                     BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                     SubBorderThickness="{Binding SubBorderThickness, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                     CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                     Foreground="{Binding Foreground, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                     IsExpanded="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                     Padding="0"
                                                                     HorizontalContentAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                     VerticalContentAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}">
                                                        <se:StswExpander.Header>
                                                            <se:StswHeader Content="{Binding Text, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           ContentVisibility="{Binding IsCompact, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}, Converter={x:Static se:StswBoolConverter.Instance}, ConverterParameter=!}"
                                                                           IconData="{Binding IconData, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           IconFill="{Binding IconFill, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           IconScale="{Binding IconScale, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           IconSource="{Binding IconSource, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           IsBusy="{Binding IsBusy, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           Margin="{Binding SubItemPadding, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                           Orientation="Horizontal"/>
                                                        </se:StswExpander.Header>
                                                        <ItemsControl ItemsSource="{Binding Items, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}">
                                                            <ItemsControl.Resources>
                                                                <Style TargetType="{x:Type se:StswNavigationElement}">
                                                                    <Setter Property="Container" Value="{Binding RelativeSource={RelativeSource AncestorType={x:Type se:StswExpander}}}"/>
                                                                </Style>
                                                            </ItemsControl.Resources>
                                                        </ItemsControl>
                                                    </se:StswExpander>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger>
                                    <!-- StswRadioButton -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding ContextNamespace, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:StswNotNullConverter.Instance}}" Value="True"/>
                                            <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource TemplatedParent}}" Value="0"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <se:StswRadioButton GroupName="{Binding GroupName, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigation}}}"
                                                                        IsChecked="{Binding IsChecked, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}">
                                                        <se:StswRadioButton.Template>
                                                            <ControlTemplate TargetType="{x:Type se:StswRadioButton}">
                                                                <se:StswClippingBorder x:Name="PART_MainBorder"
                                                                                       Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                       BorderBrush="{Binding BorderBrush, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                       BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                       CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                       SnapsToDevicePixels="True">
                                                                    <ContentPresenter Focusable="False"
                                                                                      Margin="{Binding SubItemPadding, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                      RecognizesAccessKey="True"
                                                                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                                                      HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                                      VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"/>
                                                                </se:StswClippingBorder>
                                                                <ControlTemplate.Triggers>
                                                                    <Trigger Property="IsMouseOver" Value="True">
                                                                        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.MouseOver.Background}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.MouseOver.Border}" TargetName="PART_MainBorder" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsPressed" Value="True">
                                                                        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.Pressed.Background}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.Pressed.Border}" TargetName="PART_MainBorder" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsChecked" Value="True">
                                                                        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.Checked.Background}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.Checked.Border}" TargetName="PART_MainBorder" />
                                                                    </Trigger>
                                                                    <Trigger Property="IsEnabled" Value="False">
                                                                        <Setter Property="Background" Value="{DynamicResource StswNavigationElement.Disabled.Background}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="BorderBrush" Value="{DynamicResource StswNavigationElement.Disabled.Border}" TargetName="PART_MainBorder" />
                                                                        <Setter Property="TextElement.Foreground" Value="{DynamicResource StswNavigationElement.Disabled.Foreground}" TargetName="PART_MainBorder" />
                                                                    </Trigger>
                                                                </ControlTemplate.Triggers>
                                                            </ControlTemplate>
                                                        </se:StswRadioButton.Template>
                                                        <se:StswHeader Content="{Binding Text, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                       ContentVisibility="{Binding IsCompact, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}, Converter={x:Static se:StswBoolConverter.Instance}, ConverterParameter=!}"
                                                                       IconData="{Binding IconData, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                       IconFill="{Binding IconFill, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                       IconScale="{Binding IconScale, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                       IconSource="{Binding IconSource, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                       IsBusy="{Binding IsBusy, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"
                                                                       Orientation="Horizontal"/>
                                                    </se:StswRadioButton>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger>
                                    <!-- StswSeparator -->
                                    <MultiDataTrigger>
                                        <MultiDataTrigger.Conditions>
                                            <Condition Binding="{Binding ContextNamespace, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                            <Condition Binding="{Binding IconData, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                            <Condition Binding="{Binding IconSource, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                            <Condition Binding="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" Value="{x:Null}"/>
                                            <Condition Binding="{Binding Items.Count, RelativeSource={RelativeSource TemplatedParent}}" Value="0"/>
                                        </MultiDataTrigger.Conditions>
                                        <Setter Property="ContentTemplate">
                                            <Setter.Value>
                                                <DataTemplate>
                                                    <se:StswSeparator BorderBrush="{Binding BorderBrushPressed, RelativeSource={RelativeSource AncestorType={x:Type se:StswNavigationElement}}}"/>
                                                </DataTemplate>
                                            </Setter.Value>
                                        </Setter>
                                    </MultiDataTrigger>
                                </Style.Triggers>
                            </Style>
                        </ContentControl.Style>
                    </ContentControl>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsCompact" Value="True">
                            <Setter Property="ToolTip" Value="{Binding Text, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_ContentControl" />
                        </Trigger>
                        <!--
                        <DataTrigger Binding="{Binding IsExpanded, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_SubBorder" />
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                        </DataTrigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                            <Setter Property="BorderBrush" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{Binding BackgroundPressed, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                            <Setter Property="BorderBrush" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ForegroundPressed, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                        </Trigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background" Value="{Binding BackgroundChecked, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                            <Setter Property="BorderBrush" Value="{Binding BorderBrushChecked, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ForegroundChecked, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{Binding BackgroundDisabled, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                            <Setter Property="BorderBrush" Value="{Binding BorderBrushDisabled, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                            <Setter Property="TextElement.Foreground" Value="{Binding ForegroundDisabled, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                        </Trigger>
                        -->
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
</ResourceDictionary>