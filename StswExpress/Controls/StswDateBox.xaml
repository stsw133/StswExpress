<TextBox x:Class="StswExpress.StswDateBox"
         xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
         xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
         xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
         xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
         xmlns:se="clr-namespace:StswExpress"
         mc:Ignorable="d" d:DesignHeight="40" d:DesignWidth="200">

    <TextBox.Template>
        <ControlTemplate TargetType="{x:Type TextBox}">
            <se:ClippingBorder x:Name="PART_MainBorder"
                               Background="{TemplateBinding Background}"
                               BorderBrush="{TemplateBinding BorderBrush}"
                               BorderThickness="{TemplateBinding BorderThickness}"
                               CornerRadius="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"
                               SnapsToDevicePixels="True">
                <DockPanel>
                    <!-- buttons -->
                    <se:StswToggleButton x:Name="PART_Button"
                                         DockPanel.Dock="{Binding ButtonsAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                         BorderThickness="0" CornerRadius="0" Padding="0"
                                         Width="{Binding iSize, Source={x:Static se:Settings.Default}, Converter={x:Static se:conv_Multiply.Instance}, ConverterParameter=2}">
                        <se:StswIcon Data="{x:Static se:StswIcons.Calendar}" Scale="1.5"/>
                    </se:StswToggleButton>
                    <!-- subborder -->
                    <Border x:Name="PART_SubBorder"
                            DockPanel.Dock="{Binding ButtonsAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                            BorderBrush="{Binding BorderBrush, ElementName=PART_MainBorder}"
                            BorderThickness="{Binding SubBorderThickness, RelativeSource={RelativeSource TemplatedParent}}"
                            SnapsToDevicePixels="True"/>
                    <!-- custom buttons -->
                    <ItemsControl x:Name="PART_Buttons"
                                  DockPanel.Dock="{Binding ButtonsAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                  ItemsSource="{Binding Buttons, RelativeSource={RelativeSource TemplatedParent}}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="Horizontal"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                    <!-- popup: calendar -->
                    <Popup x:Name="PART_Popup"
                           AllowsTransparency="True"
                           IsOpen="{Binding IsChecked, ElementName=PART_Button}"
                           Placement="Bottom"
                           PlacementTarget="{Binding ElementName=PART_Button}"
                           StaysOpen="False">
                        <Calendar SelectedDate="{Binding SelectedDate, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                    </Popup>
                    <!-- popup: increment type -->
                    <Popup x:Name="PART_IncrementType"
                           AllowsTransparency="True"
                           Placement="Bottom"
                           PlacementTarget="{Binding ElementName=PART_ContentHost}"
                           StaysOpen="False">
                        <UniformGrid Rows="1">
                            <se:StswToggleButton Content="YY" IsChecked="{Binding IncrementType, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_Compare.Instance}, ConverterParameter=Year}"/>
                            <se:StswToggleButton Content="MM" IsChecked="{Binding IncrementType, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_Compare.Instance}, ConverterParameter=Month}"/>
                            <se:StswToggleButton Content="DD" IsChecked="{Binding IncrementType, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_Compare.Instance}, ConverterParameter=Day}"/>
                            <se:StswToggleButton Content="hh" IsChecked="{Binding IncrementType, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_Compare.Instance}, ConverterParameter=Hour}"/>
                            <se:StswToggleButton Content="mm" IsChecked="{Binding IncrementType, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_Compare.Instance}, ConverterParameter=Minute}"/>
                            <se:StswToggleButton Content="ss" IsChecked="{Binding IncrementType, Mode=OneWay, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_Compare.Instance}, ConverterParameter=Second}"/>
                            <UniformGrid.Resources>
                                <Style TargetType="{x:Type se:StswToggleButton}">
                                    <EventSetter Event="Click" Handler="PART_IncrementType_Click"/>
                                </Style>
                            </UniformGrid.Resources>
                        </UniformGrid>
                    </Popup>
                    <!-- content -->
                    <Grid>
                        <TextBlock Foreground="{Binding ForegroundPlaceholder, RelativeSource={RelativeSource TemplatedParent}}"
                                   IsHitTestVisible="False"
                                   Margin="{TemplateBinding Padding}"
                                   Text="{Binding Placeholder, RelativeSource={RelativeSource TemplatedParent}}"
                                   HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                   VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                   Visibility="{Binding Text, RelativeSource={RelativeSource TemplatedParent}, Converter={x:Static se:conv_Compare.Instance}, ConverterParameter={x:Null}, UpdateSourceTrigger=PropertyChanged}"/>
                        <ScrollViewer x:Name="PART_ContentHost" 
                                      Focusable="False" 
                                      HorizontalScrollBarVisibility="Hidden" 
                                      VerticalScrollBarVisibility="Hidden"
                                      LostFocus="PART_ContentHost_LostFocus"
                                      MouseDown="PART_ContentHost_MouseDown"
                                      MouseWheel="PART_ContentHost_MouseWheel"/>
                    </Grid>
                </DockPanel>
            </se:ClippingBorder>
            <ControlTemplate.Triggers>
                <Trigger Property="IsMouseOver" Value="True">
                    <Setter Property="Background" Value="{Binding BackgroundMouseOver, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                    <Setter Property="BorderBrush" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                    <Setter Property="TextElement.Foreground" Value="{Binding ForegroundMouseOver, RelativeSource={RelativeSource Self}}" />
                </Trigger>
                <Trigger Property="IsKeyboardFocused" Value="True">
                    <Setter Property="Background" Value="{Binding BackgroundFocused, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                    <Setter Property="BorderBrush" Value="{Binding BorderBrushFocused, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                    <Setter Property="TextElement.Foreground" Value="{Binding ForegroundFocused, RelativeSource={RelativeSource Self}}" />
                </Trigger>
                <Trigger Property="IsReadOnly" Value="True">
                    <Setter Property="Background" Value="{Binding BackgroundReadOnly, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                    <Setter Property="IsEnabled" Value="False" TargetName="PART_Button" />
                    <Setter Property="IsEnabled" Value="False" TargetName="PART_Buttons" />
                </Trigger>
                <Trigger Property="IsEnabled" Value="False">
                    <Setter Property="Background" Value="{Binding BackgroundDisabled, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                    <Setter Property="BorderBrush" Value="{Binding BorderBrushDisabled, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                    <Setter Property="TextElement.Foreground" Value="{Binding ForegroundDisabled, RelativeSource={RelativeSource Self}}" />
                </Trigger>
            </ControlTemplate.Triggers>
        </ControlTemplate>
    </TextBox.Template>
</TextBox>
