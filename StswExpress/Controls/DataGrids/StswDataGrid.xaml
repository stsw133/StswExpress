<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress"
                    xmlns:theme="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero2">

    <Style TargetType="{x:Type se:StswDataGrid}">
        <Setter Property="Background" Value="{DynamicResource StswPanel.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource StswPanel.Static.Border}"/>
        <Setter Property="HorizontalGridLinesBrush" Value="{DynamicResource StswDataGrid.Row.Static.Border}"/>
        <Setter Property="VerticalGridLinesBrush" Value="{DynamicResource StswDataGrid.Row.Static.Border}"/>

        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="CornerClipping" Value="False"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="0"/>

        <Setter Property="AreFiltersVisible" Value="True"/>
        <Setter Property="AutoGenerateColumns" Value="False"/>
        <Setter Property="FiltersType" Value="CollectionView"/>
        <Setter Property="HeadersVisibility" Value="Column"/>
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected"/>

        <Setter Property="Focusable" Value="True"/>
        <Setter Property="IsTabStop" Value="True"/>
        <Setter Property="SnapsToDevicePixels" Value="False"/>

        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>

        <Setter Property="se:StswScrollView.CanContentScroll" Value="True"/>
        <Setter Property="se:StswScrollView.IsDynamic" Value="False"/>
        <Setter Property="se:StswScrollView.PanningMode" Value="Both"/>
        <Setter Property="se:StswScrollView.HorizontalScrollBarVisibility" Value="Auto"/>
        <Setter Property="se:StswScrollView.VerticalScrollBarVisibility" Value="Auto"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        
        <Setter Property="se:StswFocusVisual.Assign" Value="True"/>

        <Setter Property="CellStyle" Value="{DynamicResource StswDataGridCellStyle}"/>
        <Setter Property="ColumnHeaderStyle" Value="{DynamicResource StswDataGridColumnHeaderStyle}"/>
        <Setter Property="RowHeaderStyle" Value="{DynamicResource StswDataGridRowHeaderStyle}"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswDataGrid}">
                    <!-- main -->
                    <se:StswBorder x:Name="OPT_MainBorder"
                                   Background="{TemplateBinding Background}"
                                   BorderBrush="{TemplateBinding BorderBrush}"
                                   BorderThickness="{TemplateBinding BorderThickness}"
                                   CornerClipping="{TemplateBinding CornerClipping}"
                                   CornerRadius="{TemplateBinding CornerRadius}"
                                   Padding="{TemplateBinding Padding}"
                                   SnapsToDevicePixels="True">
                        <se:StswScrollView x:Name="DG_ScrollViewer"
                                           AutoScroll="{Binding (se:StswScrollView.AutoScroll), RelativeSource={RelativeSource TemplatedParent}}"
                                           CanContentScroll="{Binding (se:StswScrollView.CanContentScroll), RelativeSource={RelativeSource TemplatedParent}}"
                                           Command="{Binding (se:StswScrollView.Command), RelativeSource={RelativeSource TemplatedParent}}"
                                           CommandParameter="{Binding (se:StswScrollView.CommandParameter), RelativeSource={RelativeSource TemplatedParent}}"
                                           CommandTarget="{Binding (se:StswScrollView.CommandTarget), RelativeSource={RelativeSource TemplatedParent}}"
                                           Focusable="False"
                                           IsBusy="{Binding (se:StswScrollView.IsBusy), RelativeSource={RelativeSource TemplatedParent}}"
                                           IsDynamic="{Binding (se:StswScrollView.IsDynamic), RelativeSource={RelativeSource TemplatedParent}}"
                                           PanningMode="{Binding (se:StswScrollView.PanningMode), RelativeSource={RelativeSource TemplatedParent}}"
                                           Template="{DynamicResource StswDataGridScrollTemplate}"
                                           HorizontalScrollBarVisibility="{Binding (se:StswScrollView.HorizontalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}"
                                           VerticalScrollBarVisibility="{Binding (se:StswScrollView.VerticalScrollBarVisibility), RelativeSource={RelativeSource TemplatedParent}}">
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                        </se:StswScrollView>
                    </se:StswBorder>
                    <!-- triggers -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource StswPanel.Disabled.Background}" TargetName="OPT_MainBorder"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswPanel.Disabled.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- triggers -->
        <Style.Triggers>
            <MultiTrigger>
                <MultiTrigger.Conditions>
                    <Condition Property="IsGrouping" Value="True"/>
                    <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                </MultiTrigger.Conditions>
                <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
            </MultiTrigger>
        </Style.Triggers>
    </Style>

    <!-- data grid's column headers presenter -->
    <!--
    <Style x:Key="{x:Type DataGridColumnHeadersPresenter}" TargetType="{x:Type DataGridColumnHeadersPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeadersPresenter}">
                    <Grid>
                        <DataGridColumnHeader x:Name="PART_FillerColumnHeader" IsHitTestVisible="False"/>
                        <ItemsPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    -->

    <!-- data grid's column header floating-->
    <!--
    <Style x:Key="{x:Static DataGridColumnHeader.ColumnFloatingHeaderStyleKey}" TargetType="{x:Type Control}">
        <Setter Property="BorderBrush" Value="#FF688CAF"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Opacity" Value="0.6"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Control}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            Padding ="{TemplateBinding Padding}">
                        <Grid>
                            <Canvas x:Name="PART_VisualBrushCanvas" Margin="{TemplateBinding Margin}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    -->

    <!-- data grid's column header drop separator -->
    <!--
    <Style x:Key="{x:Static DataGridColumnHeader.ColumnHeaderDropSeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="Background" Value="#FF000080"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    -->

    <!-- StswDataGridCellsPresenterStyle -->
    <Style x:Key="StswDataGridCellsPresenterStyle" TargetType="{x:Type DataGridCellsPresenter}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCellsPresenter}">
                    <Grid Background="{Binding Background, RelativeSource={RelativeSource AncestorType={x:Type se:StswDataGrid}}}">
                        <ItemsPresenter/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StswDataGridCellStyle -->
    <Style x:Key="StswDataGridCellStyle" TargetType="{x:Type DataGridCell}">
        <Setter Property="Background" Value="{DynamicResource StswDataGrid.Cell.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.Cell.Static.Border}"/>
        <Setter Property="Foreground" Value="{DynamicResource StswText.Static.Foreground}"/>
        
        <Setter Property="BorderThickness" Value="1"/>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Border x:Name="Bd" 
                            Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- triggers -->
        <Style.Triggers>
            <Trigger Property="IsSelected" Value="True">
                <Setter Property="Background" Value="{DynamicResource StswDataGrid.Cell.Checked.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.Cell.Checked.Border}"/>
            </Trigger>
            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.Cell.Focused.Border}"/>
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Background" Value="{DynamicResource StswDataGrid.Cell.Disabled.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.Cell.Disabled.Border}"/>
                <Setter Property="Foreground" Value="{DynamicResource StswDataGrid.Cell.Disabled.Foreground}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- data grid's combobox column -->
    <!--
    <Style x:Key="{x:Static DataGridComboBoxColumn.TextBlockComboBoxStyleKey}" TargetType="{x:Type ComboBox}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ComboBox}">
                    <ContentPresenter Content="{TemplateBinding SelectionBoxItem}"
                                      ContentStringFormat="{TemplateBinding SelectionBoxItemStringFormat}"
                                      ContentTemplate="{TemplateBinding SelectionBoxItemTemplate}"
                                      ContentTemplateSelector="{TemplateBinding ItemTemplateSelector}"
                                      IsHitTestVisible="False"
                                      Margin="1"
                                      SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                      HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                      VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    -->

    <!-- StswColumnHeaderGripperStyle -->
    <Style x:Key="StswColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeWE"/>
        <Setter Property="Width" Value="6"/> <!-- 8 -->
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <!-- StswDataGridColumnHeaderStyle -->
    <Style x:Key="StswDataGridColumnHeaderStyle" TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="Background" Value="{DynamicResource StswDataGrid.ColumnHeader.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.ColumnHeader.Static.Border}"/>
        
        <Setter Property="BorderThickness" Value="0 0 1 1"/>
        <Setter Property="Padding" Value="3"/> <!-- 5 4 5 3 -->

        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridColumnHeader}">
                    <Grid>
                        <theme:DataGridHeaderBorder Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    IsClickable="{TemplateBinding CanUserSort}"
                                                    IsHovered="{TemplateBinding IsMouseOver}"
                                                    IsPressed="{TemplateBinding IsPressed}"
                                                    Padding ="{TemplateBinding Padding}"
                                                    SeparatorBrush="{TemplateBinding SeparatorBrush}"
                                                    SeparatorVisibility="{TemplateBinding SeparatorVisibility}"
                                                    SortDirection="{TemplateBinding SortDirection}">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                        </theme:DataGridHeaderBorder>
                        <Thumb x:Name="PART_LeftHeaderGripper" HorizontalAlignment="Left" Style="{DynamicResource StswColumnHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_RightHeaderGripper" HorizontalAlignment="Right" Style="{DynamicResource StswColumnHeaderGripperStyle}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- triggers -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource StswDataGrid.ColumnHeader.MouseOver.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.ColumnHeader.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource StswDataGrid.ColumnHeader.Pressed.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.ColumnHeader.Pressed.Border}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- StswRowHeaderGripperStyle -->
    <Style x:Key="StswRowHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="Transparent"/>
        <Setter Property="Cursor" Value="SizeNS"/>
        <Setter Property="Height" Value="6"/> <!-- 8 -->

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Background="{TemplateBinding Background}" Padding="{TemplateBinding Padding}"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StswDataGridRowHeaderStyle -->
    <Style x:Key="StswDataGridRowHeaderStyle" TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="Background" Value="{DynamicResource StswDataGrid.RowHeader.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.RowHeader.Static.Border}"/>
        
        <Setter Property="BorderThickness" Value="1 0 1 1"/>
        <Setter Property="Padding" Value="2"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRowHeader}">
                    <Grid>
                        <theme:DataGridHeaderBorder Background="{TemplateBinding Background}"
                                                    BorderBrush="{TemplateBinding BorderBrush}"
                                                    BorderThickness="{TemplateBinding BorderThickness}"
                                                    IsHovered ="{TemplateBinding IsMouseOver}"
                                                    IsPressed="{TemplateBinding IsPressed}"
                                                    IsSelected="{TemplateBinding IsRowSelected}"
                                                    Orientation="Horizontal"
                                                    Padding ="{TemplateBinding Padding}"
                                                    SeparatorBrush="{TemplateBinding SeparatorBrush}"
                                                    SeparatorVisibility="{TemplateBinding SeparatorVisibility}">
                            <StackPanel Orientation="Horizontal">
                                <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                                  VerticalAlignment="Center"/>
                                <Control SnapsToDevicePixels="False"
                                         Template="{Binding ValidationErrorTemplate, RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}}"
                                         Visibility="{Binding (Validation.HasError), RelativeSource={RelativeSource AncestorType={x:Type DataGridRow}}, Converter={x:Static se:StswBoolConverter.Instance}}"/>
                            </StackPanel>
                        </theme:DataGridHeaderBorder>
                        <Thumb x:Name="PART_TopHeaderGripper" VerticalAlignment="Top" Style="{DynamicResource StswRowHeaderGripperStyle}"/>
                        <Thumb x:Name="PART_BottomHeaderGripper" VerticalAlignment="Bottom" Style="{DynamicResource StswRowHeaderGripperStyle}"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <!-- triggers -->
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="True">
                <Setter Property="Background" Value="{DynamicResource StswDataGrid.RowHeader.MouseOver.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.RowHeader.MouseOver.Border}"/>
            </Trigger>
            <Trigger Property="IsPressed" Value="True">
                <Setter Property="Background" Value="{DynamicResource StswDataGrid.RowHeader.Pressed.Background}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource StswDataGrid.RowHeader.Pressed.Border}"/>
            </Trigger>
        </Style.Triggers>
    </Style>

    <!-- StswDataGridSelectAllButtonStyle -->
    <Style x:Key="{ComponentResourceKey TypeInTargetAssembly={x:Type se:StswDataGrid}, ResourceId=StswDataGridSelectAllButtonStyle}" TargetType="{x:Type se:StswButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswButton}">
                    <Grid>
                        <Rectangle x:Name="OPT_Border" Fill="{DynamicResource {x:Static SystemColors.ControlBrushKey}}" SnapsToDevicePixels="True"/>
                        <Polygon x:Name="OPT_Arrow"
                                 Fill="Black"
                                 Margin="8 8 3 3"
                                 Opacity="0.15"
                                 Points="0,10 10,10 10,0"
                                 Stretch="Uniform"
                                 HorizontalAlignment="Right"
                                 VerticalAlignment="Bottom"/>
                    </Grid>
                    <!-- triggers -->
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="OPT_Border" Property="Stroke" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="True">
                            <Setter TargetName="OPT_Border" Property="Fill" Value="{DynamicResource {x:Static SystemColors.ControlDarkBrushKey}}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter TargetName="OPT_Arrow" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>