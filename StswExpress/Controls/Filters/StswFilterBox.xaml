<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress">

    <Style TargetType="{x:Type se:StswFilterBox}">
        <Setter Property="Background" Value="{DynamicResource StswButton.Static.Background}"/>
        <Setter Property="BorderBrush" Value="{DynamicResource StswButton.Static.Border}"/>
        
        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="CornerClipping" Value="False"/>
        <Setter Property="CornerRadius" Value="0"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="SeparatorThickness" Value="2"/>

        <Setter Property="FilterMenuMode" Value="Full"/>

        <Setter Property="Focusable" Value="True"/>
        <Setter Property="IsTabStop" Value="False"/>
        <Setter Property="SnapsToDevicePixels" Value="False"/>
        
        <Setter Property="HorizontalAlignment" Value="Stretch"/>
        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalAlignment" Value="Bottom"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswFilterBox}">
                    <DockPanel>
                        <!-- filter -->
                        <se:StswBorder x:Name="OPT_MainBorder" DockPanel.Dock="Bottom"
                                       BorderBrush="{TemplateBinding BorderBrush}"
                                       BorderThickness="{TemplateBinding BorderThickness}"
                                       CornerClipping="{TemplateBinding CornerClipping}"
                                       CornerRadius="{TemplateBinding CornerRadius}"
                                       Margin="0 3 0 0"
                                       Visibility="{TemplateBinding FilterVisibility}">
                            <DockPanel>
                                <!-- filter mode -->
                                <se:StswToggleButton x:Name="PART_FilterMode"
                                                     se:StswControl.IsBorderless="True" FontFamily="Segoe UI" FontSize="15" Padding="0" Width="24"
                                                     IsChecked="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                    <se:StswOutlinedText Stroke="Black" StrokeThickness="2"/>
                                    <se:StswToggleButton.ContextMenu>
                                        <se:StswContextMenu DataContext="{Binding PlacementTarget, RelativeSource={RelativeSource Self}}"
                                                            IsOpen="{Binding IsDropDownOpen, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">

                                            <se:StswMenuItem x:Name="OPT_ModeEqual" Header="{se:Tr StswFilterBox.Equal}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.Equal}">
                                                <se:StswMenuItem.Icon>
                                                    <se:StswOutlinedText Text="=" Fill="White" Stroke="Black" StrokeThickness="2"/>
                                                </se:StswMenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeNotEqual" Header="{se:Tr StswFilterBox.NotEqual}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.NotEqual}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="≠" Fill="White" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeGreater" Header="{se:Tr StswFilterBox.Greater}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.Greater}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="&#62;" Fill="White" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeGreaterEqual" Header="{se:Tr StswFilterBox.GreaterEqual}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.GreaterEqual}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="≥" Fill="White" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeLess" Header="{se:Tr StswFilterBox.Less}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.Less}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="&#60;" Fill="White" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeLessEqual" Header="{se:Tr StswFilterBox.LessEqual}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.LessEqual}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="≤" Fill="White" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeBetween" Header="{se:Tr StswFilterBox.LessEqual}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.Between}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="≷" Fill="White" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeContains" Header="{se:Tr StswFilterBox.Contains}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.Contains}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="⊇" Fill="#4D4" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeNotContains" Header="{se:Tr StswFilterBox.NotContains}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.NotContains}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="⊉" Fill="#D54" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeLike" Header="{se:Tr StswFilterBox.Like}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.Like}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="%" Fill="#4D4" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeNotLike" Header="{se:Tr StswFilterBox.NotLike}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.NotLike}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="%" Fill="#D54" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeStartsWith" Header="{se:Tr StswFilterBox.StartsWith}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.StartsWith}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="⟝" Fill="#48D" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeEndsWith" Header="{se:Tr StswFilterBox.EndsWith}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.EndsWith}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="⟞" Fill="#48D" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeIn" Header="{se:Tr StswFilterBox.In}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.In}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="◐" Fill="#4D4" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeNotIn" Header="{se:Tr StswFilterBox.NotIn}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.NotIn}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="◐" Fill="#D54" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeNull" Header="{se:Tr StswFilterBox.Null}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.Null}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="○" Fill="White" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                            <se:StswMenuItem x:Name="OPT_ModeNotNull" Header="{se:Tr StswFilterBox.NotNull}" Visibility="Collapsed"
                                                      Command="{Binding SelectModeCommand, RelativeSource={RelativeSource TemplatedParent}}" CommandParameter="{x:Static se:StswFilterMode.NotNull}">
                                                <MenuItem.Icon>
                                                    <se:StswOutlinedText Text="⬤" Fill="#48D" Stroke="Black" StrokeThickness="2"/>
                                                </MenuItem.Icon>
                                            </se:StswMenuItem>

                                        </se:StswContextMenu>
                                    </se:StswToggleButton.ContextMenu>
                                </se:StswToggleButton>
                                <!-- separator -->
                                <se:StswSeparator x:Name="OPT_Separator"
                                                  BorderBrush="{Binding BorderBrush, ElementName=OPT_MainBorder}"
                                                  BorderThickness="{TemplateBinding SeparatorThickness}"
                                                  Orientation="Vertical"/>
                                <!-- controls -->
                                <UniformGrid x:Name="OPT_Controls" Columns="1" Background="{DynamicResource StswBox.Static.Background}">
                                    <!-- first control -->
                                    <se:StswAdaptiveBox se:StswControl.IsBorderless="True"
                                                        BorderBrush="{Binding BorderBrush, ElementName=OPT_MainBorder}"
                                                        DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                                        Format="{TemplateBinding Format}"
                                                        IsThreeState="True"
                                                        ItemsSource="{TemplateBinding ItemsSource}"
                                                        Padding="{TemplateBinding Padding}"
                                                        Placeholder=" . . . "
                                                        SelectedValuePath="{TemplateBinding SelectedValuePath}"
                                                        SelectionMode="{TemplateBinding SelectionMode}"
                                                        Type="{TemplateBinding FilterType}"
                                                        Value="{Binding Value1, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                        se:StswPopup.CornerClipping="False"
                                                        se:StswPopup.CornerRadius="0">
                                        <se:StswAdaptiveBox.Resources>
                                            <PathGeometry x:Key="StswCheck.Indeterminate.Icon" Figures="M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z"/>
                                            <Style TargetType="{x:Type se:StswCheckBox}">
                                                <Style.Triggers>
                                                    <Trigger Property="IsChecked" Value="{x:Null}">
                                                        <Setter Property="GlyphBrush" Value="{DynamicResource StswBox.Placeholder.Foreground}"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </se:StswAdaptiveBox.Resources>
                                    </se:StswAdaptiveBox>
                                    <!-- second control -->
                                    <se:StswAdaptiveBox x:Name="OPT_SecondControl"
                                                        se:StswControl.IsBorderless="True"
                                                        BorderBrush="{Binding BorderBrush, ElementName=OPT_MainBorder}"
                                                        DisplayMemberPath="{TemplateBinding DisplayMemberPath}"
                                                        Format="{TemplateBinding Format}"
                                                        IsThreeState="True"
                                                        ItemsSource="{TemplateBinding ItemsSource}"
                                                        Padding="{TemplateBinding Padding}"
                                                        Placeholder=" . . . "
                                                        SelectedValuePath="{TemplateBinding SelectedValuePath}"
                                                        SelectionMode="{TemplateBinding SelectionMode}"
                                                        Type="{TemplateBinding FilterType}"
                                                        Value="{Binding Value2, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                                        Visibility="Collapsed"
                                                        se:StswPopup.CornerClipping="False"
                                                        se:StswPopup.CornerRadius="0">
                                        <se:StswAdaptiveBox.Resources>
                                            <PathGeometry x:Key="StswCheck.Indeterminate.Icon" Figures="M16,12A2,2 0 0,1 18,10A2,2 0 0,1 20,12A2,2 0 0,1 18,14A2,2 0 0,1 16,12M10,12A2,2 0 0,1 12,10A2,2 0 0,1 14,12A2,2 0 0,1 12,14A2,2 0 0,1 10,12M4,12A2,2 0 0,1 6,10A2,2 0 0,1 8,12A2,2 0 0,1 6,14A2,2 0 0,1 4,12Z"/>
                                            <Style TargetType="{x:Type se:StswCheckBox}">
                                                <Style.Triggers>
                                                    <Trigger Property="IsChecked" Value="{x:Null}">
                                                        <Setter Property="GlyphBrush" Value="{DynamicResource StswBox.Placeholder.Foreground}"/>
                                                    </Trigger>
                                                </Style.Triggers>
                                            </Style>
                                        </se:StswAdaptiveBox.Resources>
                                    </se:StswAdaptiveBox>
                                </UniformGrid>
                            </DockPanel>
                        </se:StswBorder>
                        <!-- header -->
                        <ContentPresenter ContentSource="Header" Focusable="False" Margin="2 0"/>
                    </DockPanel>
                    
                    <ControlTemplate.Triggers>
                        <Trigger Property="FilterType" Value="Check">
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeEqual"/>
                        </Trigger>
                        <Trigger Property="FilterType" Value="Date">
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeNotEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeGreater"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeGreaterEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeLess"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeLessEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeBetween"/>
                        </Trigger>
                        <Trigger Property="FilterType" Value="List">
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeIn"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeNotIn"/>
                        </Trigger>
                        <Trigger Property="FilterType" Value="Number">
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeNotEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeGreater"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeGreaterEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeLess"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeLessEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeBetween"/>
                        </Trigger>
                        <Trigger Property="FilterType" Value="Text">
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeNotEqual"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeBetween"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeContains"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeNotContains"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeLike"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeNotLike"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeStartsWith"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeEndsWith"/>
                        </Trigger>
                        <Trigger Property="IsFilterNullSensitive" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeNull"/>
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_ModeNotNull"/>
                        </Trigger>
                        <Trigger Property="FilterMode" Value="Between">
                            <Setter Property="Visibility" Value="Visible" TargetName="OPT_SecondControl"/>
                        </Trigger>
                        <Trigger Property="FilterMenuMode" Value="ReadOnly">
                            <Setter Property="IsEnabled" Value="False" TargetName="PART_FilterMode"/>
                        </Trigger>
                        <Trigger Property="FilterMenuMode" Value="Disabled">
                            <Setter Property="Visibility" Value="Collapsed" TargetName="PART_FilterMode"/>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="OPT_Separator"/>
                        </Trigger>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding IsInDataGrid, RelativeSource={RelativeSource Self}}" Value="True"/>
                                <Condition Binding="{Binding AreFiltersVisible, RelativeSource={RelativeSource AncestorType={x:Type se:StswDataGrid}}}" Value="False"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="Visibility" Value="Collapsed" TargetName="OPT_MainBorder"/>
                        </MultiDataTrigger>
                        <Trigger Property="Header" Value="{x:Null}">
                            <Setter Property="Margin" Value="0" TargetName="OPT_MainBorder"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{DynamicResource StswButton.MouseOver.Background}" TargetName="OPT_MainBorder"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswButton.MouseOver.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="True">
                            <Setter Property="Background" Value="{DynamicResource StswButton.Pressed.Background}" TargetName="OPT_MainBorder"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswButton.Pressed.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter Property="Background" Value="{DynamicResource StswButton.Pressed.Background}" TargetName="OPT_MainBorder"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswButton.Pressed.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="True">
                            <Setter Property="Background" Value="{DynamicResource StswButton.Pressed.Background}" TargetName="OPT_MainBorder"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswButton.Pressed.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource StswButton.Disabled.Background}" TargetName="OPT_MainBorder"/>
                            <Setter Property="BorderBrush" Value="{DynamicResource StswButton.Disabled.Border}" TargetName="OPT_MainBorder"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>