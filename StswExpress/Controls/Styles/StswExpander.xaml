<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:se="clr-namespace:StswExpress">

    <Style TargetType="{x:Type se:StswExpander}">

        <Setter Property="HeaderBackground" Value="{DynamicResource StswExpander.Static.Background}"/>
        <Setter Property="HeaderBackgroundDisabled" Value="{DynamicResource StswExpander.Disabled.Background}"/>
        <Setter Property="HeaderBackgroundMouseOver" Value="{DynamicResource StswExpander.MouseOver.Background}"/>
        <Setter Property="HeaderBackgroundPressed" Value="{DynamicResource StswExpander.Pressed.Background}"/>
        <Setter Property="HeaderBackgroundChecked" Value="{DynamicResource StswExpander.Checked.Background}"/>

        <Setter Property="BorderBrush" Value="{DynamicResource StswExpander.Static.Border}"/>
        <Setter Property="BorderBrushDisabled" Value="{DynamicResource StswExpander.Disabled.Border}"/>
        <Setter Property="BorderBrushMouseOver" Value="{DynamicResource StswExpander.MouseOver.Border}"/>
        <Setter Property="BorderBrushPressed" Value="{DynamicResource StswExpander.Pressed.Border}"/>
        <Setter Property="BorderBrushChecked" Value="{DynamicResource StswExpander.Checked.Border}"/>

        <Setter Property="HeaderForegroundDisabled" Value="{DynamicResource StswBox.Disabled.Foreground}"/>
        <Setter Property="HeaderForegroundMouseOver" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HeaderForegroundPressed" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>
        <Setter Property="HeaderForegroundChecked" Value="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}"/>

        <Setter Property="BorderThickness" Value="2"/>
        <Setter Property="HeaderBorderThickness" Value="{Binding BorderThickness.Left, Mode=OneWay, RelativeSource={RelativeSource Self}, Converter={x:Static se:StswMultiplyConverter.Instance}, ConverterParameter=0.5}"/>
        <Setter Property="CornerRadius" Value="9"/>
        <Setter Property="Padding" Value="3"/>
        <Setter Property="HeaderPadding" Value="3"/>

        <Setter Property="HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="VerticalContentAlignment" Value="Stretch"/>

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type se:StswExpander}">
                    <se:ClippingBorder x:Name="PART_MainBorder"
                                       Background="{TemplateBinding Background}"
                                       BorderBrush="{TemplateBinding BorderBrush}"
                                       BorderThickness="{TemplateBinding BorderThickness}"
                                       CornerRadius="{TemplateBinding CornerRadius}"
                                       SnapsToDevicePixels="True">
                        <DockPanel>
                            <ToggleButton x:Name="HeaderSite"
                                          DockPanel.Dock="Top"
                                          Background="{TemplateBinding HeaderBackground}"
                                          BorderThickness="0"
                                          Content="{TemplateBinding Header}"
                                          ContentTemplate="{TemplateBinding HeaderTemplate}"
                                          ContentTemplateSelector="{TemplateBinding HeaderTemplateSelector}"
                                          FocusVisualStyle="{DynamicResource ExpanderHeaderFocusVisual}"
                                          FontFamily="{TemplateBinding FontFamily}"
                                          FontSize="{TemplateBinding FontSize}"
                                          FontStyle="{TemplateBinding FontStyle}"
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontWeight="{TemplateBinding FontWeight}"
                                          Foreground="{TemplateBinding Foreground}"
                                          IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"
                                          Margin="0" MinHeight="0" MinWidth="0"
                                          Padding="{TemplateBinding HeaderPadding}"
                                          Style="{DynamicResource StswExpanderDownHeaderStyle}"
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"/>
                            <Border x:Name="PART_SubBorder"
                                    DockPanel.Dock="Top"
                                    BorderBrush="{Binding BorderBrush, ElementName=PART_MainBorder}"
                                    BorderThickness="{TemplateBinding HeaderBorderThickness}"
                                    SnapsToDevicePixels="True"
                                    Visibility="Collapsed"/>
                            <ContentPresenter x:Name="ExpandSite"
                                              DockPanel.Dock="Bottom"
                                              Focusable="False"
                                              Margin="{TemplateBinding Padding}"
                                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                                              Visibility="Collapsed"/>
                        </DockPanel>
                    </se:ClippingBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsExpanded" Value="True">
                            <Setter Property="Visibility" Value="Visible" TargetName="PART_SubBorder" />
                            <Setter Property="Visibility" Value="Visible" TargetName="ExpandSite" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Left">
                            <Setter Property="DockPanel.Dock" Value="Left" TargetName="ExpandSite" />
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="HeaderSite" />
                            <Setter Property="Style" Value="{DynamicResource StswExpanderLeftHeaderStyle}" TargetName="HeaderSite" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Right">
                            <Setter Property="DockPanel.Dock" Value="Right" TargetName="ExpandSite" />
                            <Setter Property="DockPanel.Dock" Value="Left" TargetName="HeaderSite" />
                            <Setter Property="Style" Value="{DynamicResource StswExpanderRightHeaderStyle}" TargetName="HeaderSite" />
                        </Trigger>
                        <Trigger Property="ExpandDirection" Value="Up">
                            <Setter Property="DockPanel.Dock" Value="Top" TargetName="ExpandSite" />
                            <Setter Property="DockPanel.Dock" Value="Bottom" TargetName="HeaderSite" />
                            <Setter Property="Style" Value="{DynamicResource StswExpanderUpHeaderStyle}" TargetName="HeaderSite" />
                        </Trigger>
                        <DataTrigger Binding="{Binding IsMouseOver, ElementName=HeaderSite}" Value="True">
                            <Setter Property="Background" Value="{Binding HeaderBackgroundMouseOver, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                            <Setter Property="BorderBrush" Value="{Binding BorderBrushMouseOver, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                            <Setter Property="TextElement.Foreground" Value="{Binding HeaderForegroundMouseOver, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsPressed, ElementName=HeaderSite}" Value="True">
                            <Setter Property="Background" Value="{Binding HeaderBackgroundPressed, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                            <Setter Property="BorderBrush" Value="{Binding BorderBrushPressed, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                            <Setter Property="TextElement.Foreground" Value="{Binding HeaderForegroundPressed, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsChecked, ElementName=HeaderSite}" Value="True">
                            <Setter Property="Background" Value="{Binding HeaderBackgroundChecked, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                            <Setter Property="BorderBrush" Value="{Binding BorderBrushChecked, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                            <Setter Property="TextElement.Foreground" Value="{Binding HeaderForegroundChecked, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                        </DataTrigger>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{Binding HeaderBackgroundDisabled, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                            <Setter Property="BorderBrush" Value="{Binding BorderBrushDisabled, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_MainBorder" />
                            <Setter Property="TextElement.Foreground" Value="{Binding HeaderForegroundDisabled, RelativeSource={RelativeSource TemplatedParent}}" TargetName="HeaderSite" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- StswExpanderHeader -->
    <Style x:Key="StswExpanderDownHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="0" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="True" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                        <se:StswIcon x:Name="arrow" Grid.Column="1" Data="{x:Static se:StswIcons.MenuDown}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="False" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" Value="{x:Static se:StswIcons.MenuUp}" TargetName="arrow" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StswExpanderUpHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="False">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="*"/>
                            <ColumnDefinition Width="auto"/>
                        </Grid.ColumnDefinitions>
                        <ContentPresenter Grid.Column="0" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="True" HorizontalAlignment="Left" VerticalAlignment="Center"/>
                        <Grid>
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <TransformCollection>
                                            <RotateTransform Angle="180"/>
                                        </TransformCollection>
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </Grid.LayoutTransform>
                            <se:StswIcon x:Name="arrow" Grid.Column="1" Data="{x:Static se:StswIcons.MenuUp}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="False" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" Value="{x:Static se:StswIcons.MenuDown}" TargetName="arrow" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StswExpanderLeftHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="False">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <ContentPresenter Grid.Row="0" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                        <Grid>
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <TransformCollection>
                                            <RotateTransform Angle="90"/>
                                        </TransformCollection>
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </Grid.LayoutTransform>
                            <se:StswIcon x:Name="arrow" Grid.Row="1" Data="{x:Static se:StswIcons.MenuLeft}" Margin="{TemplateBinding Padding}" SnapsToDevicePixels="False" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" Value="{x:Static se:StswIcons.MenuRight}" TargetName="arrow" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StswExpanderRightHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Grid Background="{TemplateBinding Background}" SnapsToDevicePixels="False">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="*"/>
                            <RowDefinition Height="auto"/>
                        </Grid.RowDefinitions>
                        <ContentPresenter Grid.Row="0" Margin="{TemplateBinding Padding}" RecognizesAccessKey="True" SnapsToDevicePixels="True" HorizontalAlignment="Center" VerticalAlignment="Top"/>
                        <Grid>
                            <Grid.LayoutTransform>
                                <TransformGroup>
                                    <TransformGroup.Children>
                                        <TransformCollection>
                                            <RotateTransform Angle="-90"/>
                                        </TransformCollection>
                                    </TransformGroup.Children>
                                </TransformGroup>
                            </Grid.LayoutTransform>
                            <se:StswIcon x:Name="arrow" Grid.Row="1" Data="{x:Static se:StswIcons.MenuRight}" SnapsToDevicePixels="False" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                        </Grid>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Data" Value="{x:Static se:StswIcons.MenuLeft}" TargetName="arrow" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

</ResourceDictionary>